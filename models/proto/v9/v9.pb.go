// SlpProtocol v 9.5.1
// ----------- Изменения добавленные в 9.5.0 -----------
// - Обновлено описание SlpMessage. Теперь сервер обязан подтверждать каждый SlpMessage отправленный с БС.
// - Пакет CheckingConnection был добавлен в протокол и встал на место Empty (N8).
// - Обновлено описание slp пакет ConfirmingPackage.
// ----------- Изменения добавленные в 9.5.1 -----------
// - Поправлены комментарии.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: api/proto/v9.proto

package v9

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Версия протокола
type SlpProtocolVersion int32

const (
	SlpProtocolVersion_v9_5_1 SlpProtocolVersion = 0
)

// Enum value maps for SlpProtocolVersion.
var (
	SlpProtocolVersion_name = map[int32]string{
		0: "v9_5_1",
	}
	SlpProtocolVersion_value = map[string]int32{
		"v9_5_1": 0,
	}
)

func (x SlpProtocolVersion) Enum() *SlpProtocolVersion {
	p := new(SlpProtocolVersion)
	*p = x
	return p
}

func (x SlpProtocolVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SlpProtocolVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_v9_proto_enumTypes[0].Descriptor()
}

func (SlpProtocolVersion) Type() protoreflect.EnumType {
	return &file_api_proto_v9_proto_enumTypes[0]
}

func (x SlpProtocolVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SlpProtocolVersion.Descriptor instead.
func (SlpProtocolVersion) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_v9_proto_rawDescGZIP(), []int{0}
}

// Типы устройств работающие в системе SLP.(Значение этих перечислений соответствует значениям радиопротокола, поэтому изменяя значения здесь необходимо согласовывать эти изменения).
type DeviceType int32

const (
	DeviceType_empty DeviceType = 0
	DeviceType_su    DeviceType = 1 // SU - Subscriber unit.
	DeviceType_ts    DeviceType = 2 // TS - Temperature supervisor.
	DeviceType_lbs   DeviceType = 3 // LBS - Local base station.
	DeviceType_suf   DeviceType = 4 // SUF - Subscriber unit fast.
	DeviceType_bs    DeviceType = 5 // BS - Base station.
	DeviceType_bss   DeviceType = 6 // BSS - BS которая в данный момент отправлять синхроимпульсы.
)

// Enum value maps for DeviceType.
var (
	DeviceType_name = map[int32]string{
		0: "empty",
		1: "su",
		2: "ts",
		3: "lbs",
		4: "suf",
		5: "bs",
		6: "bss",
	}
	DeviceType_value = map[string]int32{
		"empty": 0,
		"su":    1,
		"ts":    2,
		"lbs":   3,
		"suf":   4,
		"bs":    5,
		"bss":   6,
	}
)

func (x DeviceType) Enum() *DeviceType {
	p := new(DeviceType)
	*p = x
	return p
}

func (x DeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_v9_proto_enumTypes[1].Descriptor()
}

func (DeviceType) Type() protoreflect.EnumType {
	return &file_api_proto_v9_proto_enumTypes[1]
}

func (x DeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceType.Descriptor instead.
func (DeviceType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_v9_proto_rawDescGZIP(), []int{1}
}

// ============================================================= Верхний уровень протокола. =============================================================
// Типы шифрования канала. Позже список возможных режимов шифрования будет расширен.
type EncryptionTypes int32

const (
	EncryptionTypes_Undefined    EncryptionTypes = 0
	EncryptionTypes_None         EncryptionTypes = 1
	EncryptionTypes_Aes_128      EncryptionTypes = 2
	EncryptionTypes_Aes_256      EncryptionTypes = 3
	EncryptionTypes_Des          EncryptionTypes = 4
	EncryptionTypes_Camellia_128 EncryptionTypes = 5
	EncryptionTypes_Camellia_256 EncryptionTypes = 6
	EncryptionTypes_Cast5        EncryptionTypes = 7
	EncryptionTypes_Idea         EncryptionTypes = 8
	EncryptionTypes_Rc2          EncryptionTypes = 9
	EncryptionTypes_Rc4          EncryptionTypes = 10
	EncryptionTypes_Seed         EncryptionTypes = 11
	EncryptionTypes_Chacha20     EncryptionTypes = 12 // Рекомендуется к использованию как самый быстрый для процессора станции.
	EncryptionTypes_Sm4          EncryptionTypes = 13
	EncryptionTypes_Blowfish     EncryptionTypes = 14
)

// Enum value maps for EncryptionTypes.
var (
	EncryptionTypes_name = map[int32]string{
		0:  "Undefined",
		1:  "None",
		2:  "Aes_128",
		3:  "Aes_256",
		4:  "Des",
		5:  "Camellia_128",
		6:  "Camellia_256",
		7:  "Cast5",
		8:  "Idea",
		9:  "Rc2",
		10: "Rc4",
		11: "Seed",
		12: "Chacha20",
		13: "Sm4",
		14: "Blowfish",
	}
	EncryptionTypes_value = map[string]int32{
		"Undefined":    0,
		"None":         1,
		"Aes_128":      2,
		"Aes_256":      3,
		"Des":          4,
		"Camellia_128": 5,
		"Camellia_256": 6,
		"Cast5":        7,
		"Idea":         8,
		"Rc2":          9,
		"Rc4":          10,
		"Seed":         11,
		"Chacha20":     12,
		"Sm4":          13,
		"Blowfish":     14,
	}
)

func (x EncryptionTypes) Enum() *EncryptionTypes {
	p := new(EncryptionTypes)
	*p = x
	return p
}

func (x EncryptionTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncryptionTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_v9_proto_enumTypes[2].Descriptor()
}

func (EncryptionTypes) Type() protoreflect.EnumType {
	return &file_api_proto_v9_proto_enumTypes[2]
}

func (x EncryptionTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncryptionTypes.Descriptor instead.
func (EncryptionTypes) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_v9_proto_rawDescGZIP(), []int{2}
}

// Типы сервисных пакетов.
type ServicePacketTypes int32

const (
	ServicePacketTypes_UnknownType ServicePacketTypes = 0 // Неизвестный(неопределённый) тип.
	ServicePacketTypes_Agps        ServicePacketTypes = 1 // Данные A-GPS.
	ServicePacketTypes_SuFirmware  ServicePacketTypes = 2 // Проишвка Su.
	ServicePacketTypes_TsFirmware  ServicePacketTypes = 3 // Прошивка Ts.
)

// Enum value maps for ServicePacketTypes.
var (
	ServicePacketTypes_name = map[int32]string{
		0: "UnknownType",
		1: "Agps",
		2: "SuFirmware",
		3: "TsFirmware",
	}
	ServicePacketTypes_value = map[string]int32{
		"UnknownType": 0,
		"Agps":        1,
		"SuFirmware":  2,
		"TsFirmware":  3,
	}
)

func (x ServicePacketTypes) Enum() *ServicePacketTypes {
	p := new(ServicePacketTypes)
	*p = x
	return p
}

func (x ServicePacketTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServicePacketTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_v9_proto_enumTypes[3].Descriptor()
}

func (ServicePacketTypes) Type() protoreflect.EnumType {
	return &file_api_proto_v9_proto_enumTypes[3]
}

func (x ServicePacketTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServicePacketTypes.Descriptor instead.
func (ServicePacketTypes) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_v9_proto_rawDescGZIP(), []int{3}
}

// Типы пакетов протокола SLP.
type SlpMessage_SlpMessageTypes int32

const (
	SlpMessage_SuData                       SlpMessage_SlpMessageTypes = 0  // Данные с конечного устройства.
	SlpMessage_TelemetryData                SlpMessage_SlpMessageTypes = 1  // Данные телеметрии базовой станции.
	SlpMessage_ConfirmingPackage            SlpMessage_SlpMessageTypes = 2  // Пакет подтверждающий приём slp пакета от BS.
	SlpMessage_BsConfig                     SlpMessage_SlpMessageTypes = 3  // Данные с новой конфигурацией BS.
	SlpMessage_RadioConfig                  SlpMessage_SlpMessageTypes = 4  // Данные с новой конфигурацией радиоканала.
	SlpMessage_SlpCommand                   SlpMessage_SlpMessageTypes = 5  // Команда системе Slp.
	SlpMessage_ResponseToSlpCommand         SlpMessage_SlpMessageTypes = 6  // Ответ от BSS на SlpCommand.
	SlpMessage_ToCancelSlpCommand           SlpMessage_SlpMessageTypes = 7  // Отменить Slp команду на станции.
	SlpMessage_CheckingConnection           SlpMessage_SlpMessageTypes = 8  // BS отправляет этот пакет когда, ей необходимо оценить качество соединения с сервером.
	SlpMessage_ServicePackage               SlpMessage_SlpMessageTypes = 9  // Сегмент с сервисным пакетом.
	SlpMessage_ServicePackageStatusRequest  SlpMessage_SlpMessageTypes = 10 // Запрос состояния сервисного пакета на BS.
	SlpMessage_ServicePackageStatusResponse SlpMessage_SlpMessageTypes = 11 // Ответ на запрос состояния сервисного пакета на BS.
	SlpMessage_DeviceRegistrationRequest    SlpMessage_SlpMessageTypes = 12 // Запрос на регистрацию устройства (тип 1).
	SlpMessage_DeviceFirmwareVersion        SlpMessage_SlpMessageTypes = 13 // Передача версии прошивки SU.
	SlpMessage_ConfirmDeviceRegistration    SlpMessage_SlpMessageTypes = 14 // Подтверждение регистрации устройства SLP.
	SlpMessage_RemoveServicePackage         SlpMessage_SlpMessageTypes = 15 // Удаление сервисного пакета на BS.
	SlpMessage_BsCommand                    SlpMessage_SlpMessageTypes = 16 // Команда для базовой станции.
	SlpMessage_RegisterDeviceInSystem       SlpMessage_SlpMessageTypes = 17 // Зарегистрировать устройство в системе.
)

// Enum value maps for SlpMessage_SlpMessageTypes.
var (
	SlpMessage_SlpMessageTypes_name = map[int32]string{
		0:  "SuData",
		1:  "TelemetryData",
		2:  "ConfirmingPackage",
		3:  "BsConfig",
		4:  "RadioConfig",
		5:  "SlpCommand",
		6:  "ResponseToSlpCommand",
		7:  "ToCancelSlpCommand",
		8:  "CheckingConnection",
		9:  "ServicePackage",
		10: "ServicePackageStatusRequest",
		11: "ServicePackageStatusResponse",
		12: "DeviceRegistrationRequest",
		13: "DeviceFirmwareVersion",
		14: "ConfirmDeviceRegistration",
		15: "RemoveServicePackage",
		16: "BsCommand",
		17: "RegisterDeviceInSystem",
	}
	SlpMessage_SlpMessageTypes_value = map[string]int32{
		"SuData":                       0,
		"TelemetryData":                1,
		"ConfirmingPackage":            2,
		"BsConfig":                     3,
		"RadioConfig":                  4,
		"SlpCommand":                   5,
		"ResponseToSlpCommand":         6,
		"ToCancelSlpCommand":           7,
		"CheckingConnection":           8,
		"ServicePackage":               9,
		"ServicePackageStatusRequest":  10,
		"ServicePackageStatusResponse": 11,
		"DeviceRegistrationRequest":    12,
		"DeviceFirmwareVersion":        13,
		"ConfirmDeviceRegistration":    14,
		"RemoveServicePackage":         15,
		"BsCommand":                    16,
		"RegisterDeviceInSystem":       17,
	}
)

func (x SlpMessage_SlpMessageTypes) Enum() *SlpMessage_SlpMessageTypes {
	p := new(SlpMessage_SlpMessageTypes)
	*p = x
	return p
}

func (x SlpMessage_SlpMessageTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SlpMessage_SlpMessageTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_v9_proto_enumTypes[4].Descriptor()
}

func (SlpMessage_SlpMessageTypes) Type() protoreflect.EnumType {
	return &file_api_proto_v9_proto_enumTypes[4]
}

func (x SlpMessage_SlpMessageTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SlpMessage_SlpMessageTypes.Descriptor instead.
func (SlpMessage_SlpMessageTypes) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_v9_proto_rawDescGZIP(), []int{2, 0}
}

// Виды дополнительных сообщений которые может передать устройство в стандартном сообщении(то что порядок сбит это нормально).
type Su_AdditionalMessageSu int32

const (
	Su_adms_0 Su_AdditionalMessageSu = 0  // Нет дополнительного сообщения.
	Su_adms_1 Su_AdditionalMessageSu = 3  // Получена команда тревоги.
	Su_adms_2 Su_AdditionalMessageSu = 4  // Получена команда смены прошивки.
	Su_adms_3 Su_AdditionalMessageSu = 10 // Подтверждение сброса всеобщей тревоги.
	Su_adms_4 Su_AdditionalMessageSu = 11 // Подтверждение снятия с регистрации устройства.
)

// Enum value maps for Su_AdditionalMessageSu.
var (
	Su_AdditionalMessageSu_name = map[int32]string{
		0:  "adms_0",
		3:  "adms_1",
		4:  "adms_2",
		10: "adms_3",
		11: "adms_4",
	}
	Su_AdditionalMessageSu_value = map[string]int32{
		"adms_0": 0,
		"adms_1": 3,
		"adms_2": 4,
		"adms_3": 10,
		"adms_4": 11,
	}
)

func (x Su_AdditionalMessageSu) Enum() *Su_AdditionalMessageSu {
	p := new(Su_AdditionalMessageSu)
	*p = x
	return p
}

func (x Su_AdditionalMessageSu) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Su_AdditionalMessageSu) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_v9_proto_enumTypes[5].Descriptor()
}

func (Su_AdditionalMessageSu) Type() protoreflect.EnumType {
	return &file_api_proto_v9_proto_enumTypes[5]
}

func (x Su_AdditionalMessageSu) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Su_AdditionalMessageSu.Descriptor instead.
func (Su_AdditionalMessageSu) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_v9_proto_rawDescGZIP(), []int{4, 0}
}

type Su_AlarmType int32

const (
	Su_no_alarm                 Su_AlarmType = 0 // Отсутствие тревоги.
	Su_triggered_alarm          Su_AlarmType = 1 // Тревога была подана нажатием кнопки.
	Su_alarm_from_accelerometer Su_AlarmType = 2 // Тревога была подана из за показаний акселерометра.
	Su_alarm_cleared            Su_AlarmType = 3 // Тревога погашена с кнопки (ответ на всеобщую тревогу в нормальном сообщении).
)

// Enum value maps for Su_AlarmType.
var (
	Su_AlarmType_name = map[int32]string{
		0: "no_alarm",
		1: "triggered_alarm",
		2: "alarm_from_accelerometer",
		3: "alarm_cleared",
	}
	Su_AlarmType_value = map[string]int32{
		"no_alarm":                 0,
		"triggered_alarm":          1,
		"alarm_from_accelerometer": 2,
		"alarm_cleared":            3,
	}
)

func (x Su_AlarmType) Enum() *Su_AlarmType {
	p := new(Su_AlarmType)
	*p = x
	return p
}

func (x Su_AlarmType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Su_AlarmType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_v9_proto_enumTypes[6].Descriptor()
}

func (Su_AlarmType) Type() protoreflect.EnumType {
	return &file_api_proto_v9_proto_enumTypes[6]
}

func (x Su_AlarmType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Su_AlarmType.Descriptor instead.
func (Su_AlarmType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_v9_proto_rawDescGZIP(), []int{4, 1}
}

// Виды дополнительных сообщений, которые может передать устройство в стандартном сообщении.
type Lbs_AdditionalMessageLbs int32

const (
	Lbs_adml_0 Lbs_AdditionalMessageLbs = 0  // Нет дополнительного сообщения.
	Lbs_adml_1 Lbs_AdditionalMessageLbs = 11 // Подтверждение снятия с регистрации устройства.
)

// Enum value maps for Lbs_AdditionalMessageLbs.
var (
	Lbs_AdditionalMessageLbs_name = map[int32]string{
		0:  "adml_0",
		11: "adml_1",
	}
	Lbs_AdditionalMessageLbs_value = map[string]int32{
		"adml_0": 0,
		"adml_1": 11,
	}
)

func (x Lbs_AdditionalMessageLbs) Enum() *Lbs_AdditionalMessageLbs {
	p := new(Lbs_AdditionalMessageLbs)
	*p = x
	return p
}

func (x Lbs_AdditionalMessageLbs) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Lbs_AdditionalMessageLbs) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_v9_proto_enumTypes[7].Descriptor()
}

func (Lbs_AdditionalMessageLbs) Type() protoreflect.EnumType {
	return &file_api_proto_v9_proto_enumTypes[7]
}

func (x Lbs_AdditionalMessageLbs) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Lbs_AdditionalMessageLbs.Descriptor instead.
func (Lbs_AdditionalMessageLbs) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_v9_proto_rawDescGZIP(), []int{5, 0}
}

// Виды дополнительных сообщений, которые может передать устройство в стандартном сообщении.
type Ts_AdditionalMessageTs int32

const (
	Ts_admt_0 Ts_AdditionalMessageTs = 0  // Нет дополнительного сообщения.
	Ts_admt_1 Ts_AdditionalMessageTs = 11 // Подтверждение снятия с регистрации устройства.
)

// Enum value maps for Ts_AdditionalMessageTs.
var (
	Ts_AdditionalMessageTs_name = map[int32]string{
		0:  "admt_0",
		11: "admt_1",
	}
	Ts_AdditionalMessageTs_value = map[string]int32{
		"admt_0": 0,
		"admt_1": 11,
	}
)

func (x Ts_AdditionalMessageTs) Enum() *Ts_AdditionalMessageTs {
	p := new(Ts_AdditionalMessageTs)
	*p = x
	return p
}

func (x Ts_AdditionalMessageTs) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ts_AdditionalMessageTs) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_v9_proto_enumTypes[8].Descriptor()
}

func (Ts_AdditionalMessageTs) Type() protoreflect.EnumType {
	return &file_api_proto_v9_proto_enumTypes[8]
}

func (x Ts_AdditionalMessageTs) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ts_AdditionalMessageTs.Descriptor instead.
func (Ts_AdditionalMessageTs) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_v9_proto_rawDescGZIP(), []int{6, 0}
}

type BsConfig_LoggingLevel int32

const (
	BsConfig_logging_undefined                     BsConfig_LoggingLevel = 0 // Неопределённо значение.
	BsConfig_logging_disabled                      BsConfig_LoggingLevel = 1 // Логирование полностью отключено.
	BsConfig_logging_only_important_anomalies      BsConfig_LoggingLevel = 2 // В логи записываются только критические ошибки и важные сообщения (Рекомендуемый режим).
	BsConfig_logging_all_anomalies                 BsConfig_LoggingLevel = 3 // В логи записываются все отклонения от нормы.
	BsConfig_detailed_logging                      BsConfig_LoggingLevel = 4 // Подробные логи (рекомендуется включать только в экстренных случаях т.к. этот режим генерирует очень много информации что может привести к быстрому истощению ресурса внешней флэшпамяти).
	BsConfig_detailed_logging_with_deserialization BsConfig_LoggingLevel = 5 // Подробные логи с десериализацией (настоятельно рекомендуется не использовать вообще (этот параметр необходим разработчикам БС)).
)

// Enum value maps for BsConfig_LoggingLevel.
var (
	BsConfig_LoggingLevel_name = map[int32]string{
		0: "logging_undefined",
		1: "logging_disabled",
		2: "logging_only_important_anomalies",
		3: "logging_all_anomalies",
		4: "detailed_logging",
		5: "detailed_logging_with_deserialization",
	}
	BsConfig_LoggingLevel_value = map[string]int32{
		"logging_undefined":                     0,
		"logging_disabled":                      1,
		"logging_only_important_anomalies":      2,
		"logging_all_anomalies":                 3,
		"detailed_logging":                      4,
		"detailed_logging_with_deserialization": 5,
	}
)

func (x BsConfig_LoggingLevel) Enum() *BsConfig_LoggingLevel {
	p := new(BsConfig_LoggingLevel)
	*p = x
	return p
}

func (x BsConfig_LoggingLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BsConfig_LoggingLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_v9_proto_enumTypes[9].Descriptor()
}

func (BsConfig_LoggingLevel) Type() protoreflect.EnumType {
	return &file_api_proto_v9_proto_enumTypes[9]
}

func (x BsConfig_LoggingLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BsConfig_LoggingLevel.Descriptor instead.
func (BsConfig_LoggingLevel) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_v9_proto_rawDescGZIP(), []int{9, 0}
}

// Доступные периоды опроса АУ.
type RadioConfig_PollingPeriod int32

const (
	RadioConfig_p_undefined           RadioConfig_PollingPeriod = 0
	RadioConfig_p_duration_30_seconds RadioConfig_PollingPeriod = 1
	RadioConfig_p_duration_60_seconds RadioConfig_PollingPeriod = 2
	RadioConfig_p_duration_2_minutes  RadioConfig_PollingPeriod = 3
	RadioConfig_p_duration_3_minutes  RadioConfig_PollingPeriod = 4
	RadioConfig_p_duration_5_minutes  RadioConfig_PollingPeriod = 5
)

// Enum value maps for RadioConfig_PollingPeriod.
var (
	RadioConfig_PollingPeriod_name = map[int32]string{
		0: "p_undefined",
		1: "p_duration_30_seconds",
		2: "p_duration_60_seconds",
		3: "p_duration_2_minutes",
		4: "p_duration_3_minutes",
		5: "p_duration_5_minutes",
	}
	RadioConfig_PollingPeriod_value = map[string]int32{
		"p_undefined":           0,
		"p_duration_30_seconds": 1,
		"p_duration_60_seconds": 2,
		"p_duration_2_minutes":  3,
		"p_duration_3_minutes":  4,
		"p_duration_5_minutes":  5,
	}
)

func (x RadioConfig_PollingPeriod) Enum() *RadioConfig_PollingPeriod {
	p := new(RadioConfig_PollingPeriod)
	*p = x
	return p
}

func (x RadioConfig_PollingPeriod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RadioConfig_PollingPeriod) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_v9_proto_enumTypes[10].Descriptor()
}

func (RadioConfig_PollingPeriod) Type() protoreflect.EnumType {
	return &file_api_proto_v9_proto_enumTypes[10]
}

func (x RadioConfig_PollingPeriod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RadioConfig_PollingPeriod.Descriptor instead.
func (RadioConfig_PollingPeriod) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_v9_proto_rawDescGZIP(), []int{10, 0}
}

// Доступные периоды короткого сна.
type RadioConfig_ShortSleepDuration int32

const (
	RadioConfig_s_undefined           RadioConfig_ShortSleepDuration = 0
	RadioConfig_s_duration_12_seconds RadioConfig_ShortSleepDuration = 1
	RadioConfig_s_duration_24_seconds RadioConfig_ShortSleepDuration = 2
	RadioConfig_s_duration_60_seconds RadioConfig_ShortSleepDuration = 3
	RadioConfig_s_duration_2_minutes  RadioConfig_ShortSleepDuration = 4
)

// Enum value maps for RadioConfig_ShortSleepDuration.
var (
	RadioConfig_ShortSleepDuration_name = map[int32]string{
		0: "s_undefined",
		1: "s_duration_12_seconds",
		2: "s_duration_24_seconds",
		3: "s_duration_60_seconds",
		4: "s_duration_2_minutes",
	}
	RadioConfig_ShortSleepDuration_value = map[string]int32{
		"s_undefined":           0,
		"s_duration_12_seconds": 1,
		"s_duration_24_seconds": 2,
		"s_duration_60_seconds": 3,
		"s_duration_2_minutes":  4,
	}
)

func (x RadioConfig_ShortSleepDuration) Enum() *RadioConfig_ShortSleepDuration {
	p := new(RadioConfig_ShortSleepDuration)
	*p = x
	return p
}

func (x RadioConfig_ShortSleepDuration) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RadioConfig_ShortSleepDuration) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_v9_proto_enumTypes[11].Descriptor()
}

func (RadioConfig_ShortSleepDuration) Type() protoreflect.EnumType {
	return &file_api_proto_v9_proto_enumTypes[11]
}

func (x RadioConfig_ShortSleepDuration) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RadioConfig_ShortSleepDuration.Descriptor instead.
func (RadioConfig_ShortSleepDuration) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_v9_proto_rawDescGZIP(), []int{10, 1}
}

// Доступные периоды долгого сна.
type RadioConfig_LongSleepDuration int32

const (
	RadioConfig_l_undefined           RadioConfig_LongSleepDuration = 0
	RadioConfig_l_duration_2_minutes  RadioConfig_LongSleepDuration = 1
	RadioConfig_l_duration_10_minutes RadioConfig_LongSleepDuration = 2
	RadioConfig_l_duration_30_minutes RadioConfig_LongSleepDuration = 3
	RadioConfig_l_duration_1_hour     RadioConfig_LongSleepDuration = 4
)

// Enum value maps for RadioConfig_LongSleepDuration.
var (
	RadioConfig_LongSleepDuration_name = map[int32]string{
		0: "l_undefined",
		1: "l_duration_2_minutes",
		2: "l_duration_10_minutes",
		3: "l_duration_30_minutes",
		4: "l_duration_1_hour",
	}
	RadioConfig_LongSleepDuration_value = map[string]int32{
		"l_undefined":           0,
		"l_duration_2_minutes":  1,
		"l_duration_10_minutes": 2,
		"l_duration_30_minutes": 3,
		"l_duration_1_hour":     4,
	}
)

func (x RadioConfig_LongSleepDuration) Enum() *RadioConfig_LongSleepDuration {
	p := new(RadioConfig_LongSleepDuration)
	*p = x
	return p
}

func (x RadioConfig_LongSleepDuration) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RadioConfig_LongSleepDuration) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_v9_proto_enumTypes[12].Descriptor()
}

func (RadioConfig_LongSleepDuration) Type() protoreflect.EnumType {
	return &file_api_proto_v9_proto_enumTypes[12]
}

func (x RadioConfig_LongSleepDuration) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RadioConfig_LongSleepDuration.Descriptor instead.
func (RadioConfig_LongSleepDuration) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_v9_proto_rawDescGZIP(), []int{10, 2}
}

type BsCommand_BaseStationCommands int32

const (
	BsCommand_Pass                BsCommand_BaseStationCommands = 0 // Пустая команда. Нужна для отладки.
	BsCommand_Reset               BsCommand_BaseStationCommands = 1 // Перезагрузить БС.
	BsCommand_GetBsSettings       BsCommand_BaseStationCommands = 2 // Запросить текущие настройки станции.
	BsCommand_GetRadioSettings    BsCommand_BaseStationCommands = 3 // Запросить текущую конфигурацию радиоканала станции.
	BsCommand_CancelAllSlpCommand BsCommand_BaseStationCommands = 4 // Очищает буфер slp команд.
)

// Enum value maps for BsCommand_BaseStationCommands.
var (
	BsCommand_BaseStationCommands_name = map[int32]string{
		0: "Pass",
		1: "Reset",
		2: "GetBsSettings",
		3: "GetRadioSettings",
		4: "CancelAllSlpCommand",
	}
	BsCommand_BaseStationCommands_value = map[string]int32{
		"Pass":                0,
		"Reset":               1,
		"GetBsSettings":       2,
		"GetRadioSettings":    3,
		"CancelAllSlpCommand": 4,
	}
)

func (x BsCommand_BaseStationCommands) Enum() *BsCommand_BaseStationCommands {
	p := new(BsCommand_BaseStationCommands)
	*p = x
	return p
}

func (x BsCommand_BaseStationCommands) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BsCommand_BaseStationCommands) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_v9_proto_enumTypes[13].Descriptor()
}

func (BsCommand_BaseStationCommands) Type() protoreflect.EnumType {
	return &file_api_proto_v9_proto_enumTypes[13]
}

func (x BsCommand_BaseStationCommands) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BsCommand_BaseStationCommands.Descriptor instead.
func (BsCommand_BaseStationCommands) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_v9_proto_rawDescGZIP(), []int{11, 0}
}

type SlpCommand_SlpCommands int32

const (
	SlpCommand_command_u  SlpCommand_SlpCommands = 0  // (-) Пустое значение.
	SlpCommand_command_1  SlpCommand_SlpCommands = 1  // (pp) Запустить передачу A-GPS (argument_1 - version EPO файлов).
	SlpCommand_command_2  SlpCommand_SlpCommands = 2  // (4) Прошить конкретный SU (argument_1 - firmware version; argument_2 - номер SU.).
	SlpCommand_command_3  SlpCommand_SlpCommands = 3  // (4) Запрос версии прошивки у SU (argument_1 - номер SU.).
	SlpCommand_command_4  SlpCommand_SlpCommands = 4  // (pp * N) Всеобщая тревога (argument_1 - тип тревоги; argument_2 - количество повторений трансляций.).
	SlpCommand_command_5  SlpCommand_SlpCommands = 5  // (4) Тревога для конкретного SU (argument_1 - тип тревоги (1 или 2); argument_2 - номер SU.).
	SlpCommand_command_6  SlpCommand_SlpCommands = 6  // (4) Перепрошить все TS (argument_1 - версия прошивки TS).
	SlpCommand_command_7  SlpCommand_SlpCommands = 7  // (4) Снятие с регистрации SU или TC (argument_1 - номер SU).
	SlpCommand_command_8  SlpCommand_SlpCommands = 8  // (pp) Перепрошить все SU со сверкой версии (argument_1 - версия прошивки SU).
	SlpCommand_command_9  SlpCommand_SlpCommands = 9  // (pp) Перепрошить все SU без сверки версии (argument_1 - версия прошивки SU).
	SlpCommand_command_10 SlpCommand_SlpCommands = 10 // (4) Перепрошить все устройства в определённом кадре и определённом канале (argument_1 - версия прошивки SU; argument_2 - номер кадра + номер канала * 1024.).
	SlpCommand_command_11 SlpCommand_SlpCommands = 11 // (4) Смена регистрации у определённого устройства (argument_1 - номер SU).
	SlpCommand_command_12 SlpCommand_SlpCommands = 12 // (4) Изменение настроек LBS (argument_1 - номер LBS).
)

// Enum value maps for SlpCommand_SlpCommands.
var (
	SlpCommand_SlpCommands_name = map[int32]string{
		0:  "command_u",
		1:  "command_1",
		2:  "command_2",
		3:  "command_3",
		4:  "command_4",
		5:  "command_5",
		6:  "command_6",
		7:  "command_7",
		8:  "command_8",
		9:  "command_9",
		10: "command_10",
		11: "command_11",
		12: "command_12",
	}
	SlpCommand_SlpCommands_value = map[string]int32{
		"command_u":  0,
		"command_1":  1,
		"command_2":  2,
		"command_3":  3,
		"command_4":  4,
		"command_5":  5,
		"command_6":  6,
		"command_7":  7,
		"command_8":  8,
		"command_9":  9,
		"command_10": 10,
		"command_11": 11,
		"command_12": 12,
	}
)

func (x SlpCommand_SlpCommands) Enum() *SlpCommand_SlpCommands {
	p := new(SlpCommand_SlpCommands)
	*p = x
	return p
}

func (x SlpCommand_SlpCommands) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SlpCommand_SlpCommands) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_v9_proto_enumTypes[14].Descriptor()
}

func (SlpCommand_SlpCommands) Type() protoreflect.EnumType {
	return &file_api_proto_v9_proto_enumTypes[14]
}

func (x SlpCommand_SlpCommands) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SlpCommand_SlpCommands.Descriptor instead.
func (SlpCommand_SlpCommands) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_v9_proto_rawDescGZIP(), []int{12, 0}
}

type ResponseToSlpCommand_CommandStatus int32

const (
	ResponseToSlpCommand_unknown_status                  ResponseToSlpCommand_CommandStatus = 0 // Произошло что-то непредвиденное.
	ResponseToSlpCommand_command_is_accepted             ResponseToSlpCommand_CommandStatus = 1 // Команда успешно принята на исполнение.
	ResponseToSlpCommand_err_sync_pulse_already_occupied ResponseToSlpCommand_CommandStatus = 2 // Текущие синхроимпульсы уже заняты другими командами. Эта ошибка возникает когда неправильно выбран time_point или на станции уже прямо
	// сейчас выполняется команда которая требует длительного периода времени на своё выполнение (например перепрошивка устройств или эпох).
	ResponseToSlpCommand_err_not_have_time_to_take_time_point ResponseToSlpCommand_CommandStatus = 3 // BSS не успела "застолбить" синхроимпульсы соответствующий time_point. Скорее всего time_point быд задан впритык текущему времени.
	ResponseToSlpCommand_err_service_package_unavailable      ResponseToSlpCommand_CommandStatus = 4 // Недоступен сервисный пакет необходимый для этой команды.
	ResponseToSlpCommand_err_i_is_bs                          ResponseToSlpCommand_CommandStatus = 5 // Это станция работающая в режиме BS а не BSS.
	ResponseToSlpCommand_err_time_point_too_far               ResponseToSlpCommand_CommandStatus = 6 // Опорная точка находится слишком далеко в будующем(как правило > 2 суток от текущего времени по UTC).
)

// Enum value maps for ResponseToSlpCommand_CommandStatus.
var (
	ResponseToSlpCommand_CommandStatus_name = map[int32]string{
		0: "unknown_status",
		1: "command_is_accepted",
		2: "err_sync_pulse_already_occupied",
		3: "err_not_have_time_to_take_time_point",
		4: "err_service_package_unavailable",
		5: "err_i_is_bs",
		6: "err_time_point_too_far",
	}
	ResponseToSlpCommand_CommandStatus_value = map[string]int32{
		"unknown_status":                       0,
		"command_is_accepted":                  1,
		"err_sync_pulse_already_occupied":      2,
		"err_not_have_time_to_take_time_point": 3,
		"err_service_package_unavailable":      4,
		"err_i_is_bs":                          5,
		"err_time_point_too_far":               6,
	}
)

func (x ResponseToSlpCommand_CommandStatus) Enum() *ResponseToSlpCommand_CommandStatus {
	p := new(ResponseToSlpCommand_CommandStatus)
	*p = x
	return p
}

func (x ResponseToSlpCommand_CommandStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseToSlpCommand_CommandStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_v9_proto_enumTypes[15].Descriptor()
}

func (ResponseToSlpCommand_CommandStatus) Type() protoreflect.EnumType {
	return &file_api_proto_v9_proto_enumTypes[15]
}

func (x ResponseToSlpCommand_CommandStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseToSlpCommand_CommandStatus.Descriptor instead.
func (ResponseToSlpCommand_CommandStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_v9_proto_rawDescGZIP(), []int{13, 0}
}

type ServicePackageStatusResponse_ResponseStatus int32

const (
	ServicePackageStatusResponse_rs_package_ready   ServicePackageStatusResponse_ResponseStatus = 0 // Пакет полностью закачен и готов к трансляции.
	ServicePackageStatusResponse_package_missing    ServicePackageStatusResponse_ResponseStatus = 1 // Пакет на BS отсутсвует.
	ServicePackageStatusResponse_incomplete_package ServicePackageStatusResponse_ResponseStatus = 2 // Пакет закачан не полностью (номера недостающих сегментов перечислены в missing_segments).
	ServicePackageStatusResponse_invalid_crc        ServicePackageStatusResponse_ResponseStatus = 3 // Не совпало CRC пакета.
)

// Enum value maps for ServicePackageStatusResponse_ResponseStatus.
var (
	ServicePackageStatusResponse_ResponseStatus_name = map[int32]string{
		0: "rs_package_ready",
		1: "package_missing",
		2: "incomplete_package",
		3: "invalid_crc",
	}
	ServicePackageStatusResponse_ResponseStatus_value = map[string]int32{
		"rs_package_ready":   0,
		"package_missing":    1,
		"incomplete_package": 2,
		"invalid_crc":        3,
	}
)

func (x ServicePackageStatusResponse_ResponseStatus) Enum() *ServicePackageStatusResponse_ResponseStatus {
	p := new(ServicePackageStatusResponse_ResponseStatus)
	*p = x
	return p
}

func (x ServicePackageStatusResponse_ResponseStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServicePackageStatusResponse_ResponseStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_v9_proto_enumTypes[16].Descriptor()
}

func (ServicePackageStatusResponse_ResponseStatus) Type() protoreflect.EnumType {
	return &file_api_proto_v9_proto_enumTypes[16]
}

func (x ServicePackageStatusResponse_ResponseStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServicePackageStatusResponse_ResponseStatus.Descriptor instead.
func (ServicePackageStatusResponse_ResponseStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_v9_proto_rawDescGZIP(), []int{18, 0}
}

type RegisterDeviceInSystem_Status int32

const (
	RegisterDeviceInSystem_Refusal                       RegisterDeviceInSystem_Status = 0 // Отказ в регистрации.
	RegisterDeviceInSystem_Accepted                      RegisterDeviceInSystem_Status = 1 // Дать устройству соответствующие параметры (указанные ниже).
	RegisterDeviceInSystem_ResetRegistration             RegisterDeviceInSystem_Status = 2 // Сброс регистрации.
	RegisterDeviceInSystem_ManualRegistrationPreparation RegisterDeviceInSystem_Status = 3 // Подготовка ручной регистрации.
)

// Enum value maps for RegisterDeviceInSystem_Status.
var (
	RegisterDeviceInSystem_Status_name = map[int32]string{
		0: "Refusal",
		1: "Accepted",
		2: "ResetRegistration",
		3: "ManualRegistrationPreparation",
	}
	RegisterDeviceInSystem_Status_value = map[string]int32{
		"Refusal":                       0,
		"Accepted":                      1,
		"ResetRegistration":             2,
		"ManualRegistrationPreparation": 3,
	}
)

func (x RegisterDeviceInSystem_Status) Enum() *RegisterDeviceInSystem_Status {
	p := new(RegisterDeviceInSystem_Status)
	*p = x
	return p
}

func (x RegisterDeviceInSystem_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegisterDeviceInSystem_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_v9_proto_enumTypes[17].Descriptor()
}

func (RegisterDeviceInSystem_Status) Type() protoreflect.EnumType {
	return &file_api_proto_v9_proto_enumTypes[17]
}

func (x RegisterDeviceInSystem_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegisterDeviceInSystem_Status.Descriptor instead.
func (RegisterDeviceInSystem_Status) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_v9_proto_rawDescGZIP(), []int{23, 0}
}

// Запрос на соединение с сервером. Этот пакет всегда отправляется в нешифрованном виде.
type ConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BsId              int32           `protobuf:"varint,1,opt,name=bs_id,json=bsId,proto3" json:"bs_id,omitempty"`                                                                // Id базовой станции.
	SiteNumber        int32           `protobuf:"varint,2,opt,name=site_number,json=siteNumber,proto3" json:"site_number,omitempty"`                                              // Номер объекта.
	EncryptionType    EncryptionTypes `protobuf:"varint,3,opt,name=encryption_type,json=encryptionType,proto3,enum=SlpProtocol.EncryptionTypes" json:"encryption_type,omitempty"` // Тип шифрования канала.
	BsAppVersion      string          `protobuf:"bytes,4,opt,name=bs_app_version,json=bsAppVersion,proto3" json:"bs_app_version,omitempty"`                                       // Версия текущей прошивки базовой станции.
	IsFirstLaunch     bool            `protobuf:"varint,5,opt,name=is_first_launch,json=isFirstLaunch,proto3" json:"is_first_launch,omitempty"`                                   // Флаг того, что приложение было запущено впервые (флаг перезагрузки системы).
	IsFirstConnection bool            `protobuf:"varint,6,opt,name=is_first_connection,json=isFirstConnection,proto3" json:"is_first_connection,omitempty"`                       // Флаг того, что приложение производит своё первое соединение (флаг перезагрузки приложения).
}

func (x *ConnectionRequest) Reset() {
	*x = ConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_v9_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionRequest) ProtoMessage() {}

func (x *ConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_v9_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionRequest.ProtoReflect.Descriptor instead.
func (*ConnectionRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_v9_proto_rawDescGZIP(), []int{0}
}

func (x *ConnectionRequest) GetBsId() int32 {
	if x != nil {
		return x.BsId
	}
	return 0
}

func (x *ConnectionRequest) GetSiteNumber() int32 {
	if x != nil {
		return x.SiteNumber
	}
	return 0
}

func (x *ConnectionRequest) GetEncryptionType() EncryptionTypes {
	if x != nil {
		return x.EncryptionType
	}
	return EncryptionTypes_Undefined
}

func (x *ConnectionRequest) GetBsAppVersion() string {
	if x != nil {
		return x.BsAppVersion
	}
	return ""
}

func (x *ConnectionRequest) GetIsFirstLaunch() bool {
	if x != nil {
		return x.IsFirstLaunch
	}
	return false
}

func (x *ConnectionRequest) GetIsFirstConnection() bool {
	if x != nil {
		return x.IsFirstConnection
	}
	return false
}

// Ответ на запрос на соединение с сервером. Этот пакет всегда отправляется в нешифрованном виде.
type ConfirmConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionConfirmed bool `protobuf:"varint,1,opt,name=connection_confirmed,json=connectionConfirmed,proto3" json:"connection_confirmed,omitempty"` // Отверждение соединения или отказ.
}

func (x *ConfirmConnection) Reset() {
	*x = ConfirmConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_v9_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmConnection) ProtoMessage() {}

func (x *ConfirmConnection) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_v9_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmConnection.ProtoReflect.Descriptor instead.
func (*ConfirmConnection) Descriptor() ([]byte, []int) {
	return file_api_proto_v9_proto_rawDescGZIP(), []int{1}
}

func (x *ConfirmConnection) GetConnectionConfirmed() bool {
	if x != nil {
		return x.ConnectionConfirmed
	}
	return false
}

// Стандартное сообщение сетевого протокола SLP. На каждый такой пакет от BS сервер должен отправлять подтверждающий пакет SlpMessage::ConfirmingPackage.
type SlpMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolVersion int32                      `protobuf:"varint,1,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`                                 // Версия протокола.
	MessageType     SlpMessage_SlpMessageTypes `protobuf:"varint,2,opt,name=message_type,json=messageType,proto3,enum=SlpProtocol.SlpMessage_SlpMessageTypes" json:"message_type,omitempty"` // Тип пакета.
	PackageId       uint32                     `protobuf:"varint,3,opt,name=package_id,json=packageId,proto3" json:"package_id,omitempty"`                                                   // ID пакета. У каждого пакета свой id который инкрементируется с отправкой каждого пакета.
	// Когда это значение становиться == 2^14 - 1 = 16383 то отсчёт снова начинается с нуля.
	Data []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"` // Payload.
}

func (x *SlpMessage) Reset() {
	*x = SlpMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_v9_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlpMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlpMessage) ProtoMessage() {}

func (x *SlpMessage) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_v9_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlpMessage.ProtoReflect.Descriptor instead.
func (*SlpMessage) Descriptor() ([]byte, []int) {
	return file_api_proto_v9_proto_rawDescGZIP(), []int{2}
}

func (x *SlpMessage) GetProtocolVersion() int32 {
	if x != nil {
		return x.ProtocolVersion
	}
	return 0
}

func (x *SlpMessage) GetMessageType() SlpMessage_SlpMessageTypes {
	if x != nil {
		return x.MessageType
	}
	return SlpMessage_SuData
}

func (x *SlpMessage) GetPackageId() uint32 {
	if x != nil {
		return x.PackageId
	}
	return 0
}

func (x *SlpMessage) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Данные конечных устройств сети.
// BS -> Server.
// Поле data содержит не распарсенные данные с конечных устройств сети. Эти данные должны парситься по соответствующему
// протоколу устройства. Данные выровнены по 25 байт, первые 22 байта данные пришедшие по радиоканалу, затем два байта rssi устройства (int16) и последний байт это nois (int8).
// Это поле используется, когда распарсить данные на BS не представляется возможным. Поле su_list содержит уже распарсенные ранее данные которые можно забирать как есть.
type SuData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`                      // Информация c одного или нескольких устройств которых нет в протоколе (вероятно, новых). По 25 байт. максимум 8 su или 200 байт.
	SuList  []*Su  `protobuf:"bytes,2,rep,name=su_list,json=suList,proto3" json:"su_list,omitempty"`    // Информация c одного или нескольких SU в десериализованном виде.
	LbsList []*Lbs `protobuf:"bytes,3,rep,name=Lbs_list,json=LbsList,proto3" json:"Lbs_list,omitempty"` // Информация c одного или нескольких LBS в десериализованном виде.
	TsList  []*Ts  `protobuf:"bytes,4,rep,name=Ts_list,json=TsList,proto3" json:"Ts_list,omitempty"`    // Информация c одного или нескольких TS в десериализованном виде.
}

func (x *SuData) Reset() {
	*x = SuData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_v9_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuData) ProtoMessage() {}

func (x *SuData) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_v9_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuData.ProtoReflect.Descriptor instead.
func (*SuData) Descriptor() ([]byte, []int) {
	return file_api_proto_v9_proto_rawDescGZIP(), []int{3}
}

func (x *SuData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SuData) GetSuList() []*Su {
	if x != nil {
		return x.SuList
	}
	return nil
}

func (x *SuData) GetLbsList() []*Lbs {
	if x != nil {
		return x.LbsList
	}
	return nil
}

func (x *SuData) GetTsList() []*Ts {
	if x != nil {
		return x.TsList
	}
	return nil
}

// Payload от одного абонентского устройства SLP. В зависимости version некоторые поля будут не валидными (будут иметь нулевые значения).
type Su struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                            // (v1,2,3) Номер устройства.
	Version              uint32                 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`                                  // (Тут задаётся версия) Версия внутреннего протокола устройства.
	ReceivingTime        uint32                 `protobuf:"varint,3,opt,name=receiving_time,json=receivingTime,proto3" json:"receiving_time,omitempty"` // (v1,2,3) Время приёма пакета замеренное на БС (миллисекунды прошедшие с начала суток по UTC).
	ReceivingRssi        int32                  `protobuf:"varint,4,opt,name=receiving_rssi,json=receivingRssi,proto3" json:"receiving_rssi,omitempty"` // (v1,2,3) RSSI замеренное на BS при приёме данных.
	ReceivingNois        int32                  `protobuf:"varint,5,opt,name=receiving_nois,json=receivingNois,proto3" json:"receiving_nois,omitempty"` // (v1,2,3) Уровень шума замеренный на BS при приёме данных.
	Hour                 uint32                 `protobuf:"varint,6,opt,name=hour,proto3" json:"hour,omitempty"`                                        // (v1,2,3) Текущее время по гринвичу.
	Minute               uint32                 `protobuf:"varint,7,opt,name=minute,proto3" json:"minute,omitempty"`
	Second               uint32                 `protobuf:"varint,8,opt,name=second,proto3" json:"second,omitempty"`
	Bat                  uint32                 `protobuf:"varint,9,opt,name=bat,proto3" json:"bat,omitempty"`                                                                                               // (v1,2,3) Уровень заряда батареи в процентах.
	Alarm                Su_AlarmType           `protobuf:"varint,10,opt,name=alarm,proto3,enum=SlpProtocol.Su_AlarmType" json:"alarm,omitempty"`                                                            // (v1,2,3) Информация о сигнале тревоги.
	Latitude             float32                `protobuf:"fixed32,11,opt,name=latitude,proto3" json:"latitude,omitempty"`                                                                                   // (v1,2,3) Широта.
	Longitude            float32                `protobuf:"fixed32,12,opt,name=longitude,proto3" json:"longitude,omitempty"`                                                                                 // (v1,2,3) Долгота.
	Pressure             float32                `protobuf:"fixed32,13,opt,name=pressure,proto3" json:"pressure,omitempty"`                                                                                   // (v1,2,3) Атмосферное давление в гектопаскалях.
	NumberSatellites     uint32                 `protobuf:"varint,14,opt,name=number_satellites,json=numberSatellites,proto3" json:"number_satellites,omitempty"`                                            // (v1,2,3) Число принимаемых спутников.
	FixQuality           uint32                 `protobuf:"varint,15,opt,name=fix_quality,json=fixQuality,proto3" json:"fix_quality,omitempty"`                                                              // (v1,2,3) Quality статус GPS\GLONASS приёмника.
	Hdop                 float32                `protobuf:"fixed32,16,opt,name=hdop,proto3" json:"hdop,omitempty"`                                                                                           // (v2,3) Коэффициент потери точности HDOP (1: ±3м , 99: ±350м).
	Azimuth              uint32                 `protobuf:"varint,17,opt,name=azimuth,proto3" json:"azimuth,omitempty"`                                                                                      // (v2,3) 0÷358 с шагом 2 градуса.
	Speed                float32                `protobuf:"fixed32,18,opt,name=speed,proto3" json:"speed,omitempty"`                                                                                         // (v2,3) Скорость.
	Temperature          float32                `protobuf:"fixed32,19,opt,name=temperature,proto3" json:"temperature,omitempty"`                                                                             // (v2,3) Температура.
	LevelOfMotorActivity uint32                 `protobuf:"varint,20,opt,name=level_of_motor_activity,json=levelOfMotorActivity,proto3" json:"level_of_motor_activity,omitempty"`                            // (v2,3) Уровень двигательной активности: (0 – 3), 0 – покой
	InRoom               bool                   `protobuf:"varint,21,opt,name=in_room,json=inRoom,proto3" json:"in_room,omitempty"`                                                                          // (v3) Признак нахождения в помещении.
	HeightChange         uint32                 `protobuf:"varint,22,opt,name=height_change,json=heightChange,proto3" json:"height_change,omitempty"`                                                        // (v3) Максимальное изменения высоты между сеансами связи: 0, 3, 6, 9, 12, 15, >18. Если значение 18 то скорость изменения высоты может быть больше, просто 18 это предел измерения.
	AccelerationOnImpact uint32                 `protobuf:"varint,23,opt,name=acceleration_on_impact,json=accelerationOnImpact,proto3" json:"acceleration_on_impact,omitempty"`                              // (v3) Максимальное ускорение при срабатывании датчика удара: 0, 3, >8 g. Если значение = 8 то реальное ускорение может быть больше, просто 8 это предел измерения.
	AdditionalMessage    Su_AdditionalMessageSu `protobuf:"varint,24,opt,name=additional_message,json=additionalMessage,proto3,enum=SlpProtocol.Su_AdditionalMessageSu" json:"additional_message,omitempty"` // (v3) Дополнительное сообщение которые может передать устройство в стандартном сообщении.
	AccelerometerX       int32                  `protobuf:"varint,25,opt,name=accelerometer_x,json=accelerometerX,proto3" json:"accelerometer_x,omitempty"`                                                  // (v1) Ускорение по оси Х.
	AccelerometerY       int32                  `protobuf:"varint,26,opt,name=accelerometer_y,json=accelerometerY,proto3" json:"accelerometer_y,omitempty"`                                                  // (v1) Ускорение по оси Y.
	AccelerometerZ       int32                  `protobuf:"varint,27,opt,name=accelerometer_z,json=accelerometerZ,proto3" json:"accelerometer_z,omitempty"`                                                  // (v1) Ускорение по оси Z.
}

func (x *Su) Reset() {
	*x = Su{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_v9_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Su) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Su) ProtoMessage() {}

func (x *Su) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_v9_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Su.ProtoReflect.Descriptor instead.
func (*Su) Descriptor() ([]byte, []int) {
	return file_api_proto_v9_proto_rawDescGZIP(), []int{4}
}

func (x *Su) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Su) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Su) GetReceivingTime() uint32 {
	if x != nil {
		return x.ReceivingTime
	}
	return 0
}

func (x *Su) GetReceivingRssi() int32 {
	if x != nil {
		return x.ReceivingRssi
	}
	return 0
}

func (x *Su) GetReceivingNois() int32 {
	if x != nil {
		return x.ReceivingNois
	}
	return 0
}

func (x *Su) GetHour() uint32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *Su) GetMinute() uint32 {
	if x != nil {
		return x.Minute
	}
	return 0
}

func (x *Su) GetSecond() uint32 {
	if x != nil {
		return x.Second
	}
	return 0
}

func (x *Su) GetBat() uint32 {
	if x != nil {
		return x.Bat
	}
	return 0
}

func (x *Su) GetAlarm() Su_AlarmType {
	if x != nil {
		return x.Alarm
	}
	return Su_no_alarm
}

func (x *Su) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Su) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Su) GetPressure() float32 {
	if x != nil {
		return x.Pressure
	}
	return 0
}

func (x *Su) GetNumberSatellites() uint32 {
	if x != nil {
		return x.NumberSatellites
	}
	return 0
}

func (x *Su) GetFixQuality() uint32 {
	if x != nil {
		return x.FixQuality
	}
	return 0
}

func (x *Su) GetHdop() float32 {
	if x != nil {
		return x.Hdop
	}
	return 0
}

func (x *Su) GetAzimuth() uint32 {
	if x != nil {
		return x.Azimuth
	}
	return 0
}

func (x *Su) GetSpeed() float32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *Su) GetTemperature() float32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *Su) GetLevelOfMotorActivity() uint32 {
	if x != nil {
		return x.LevelOfMotorActivity
	}
	return 0
}

func (x *Su) GetInRoom() bool {
	if x != nil {
		return x.InRoom
	}
	return false
}

func (x *Su) GetHeightChange() uint32 {
	if x != nil {
		return x.HeightChange
	}
	return 0
}

func (x *Su) GetAccelerationOnImpact() uint32 {
	if x != nil {
		return x.AccelerationOnImpact
	}
	return 0
}

func (x *Su) GetAdditionalMessage() Su_AdditionalMessageSu {
	if x != nil {
		return x.AdditionalMessage
	}
	return Su_adms_0
}

func (x *Su) GetAccelerometerX() int32 {
	if x != nil {
		return x.AccelerometerX
	}
	return 0
}

func (x *Su) GetAccelerometerY() int32 {
	if x != nil {
		return x.AccelerometerY
	}
	return 0
}

func (x *Su) GetAccelerometerZ() int32 {
	if x != nil {
		return x.AccelerometerZ
	}
	return 0
}

// Пакет с данными от одной LBS.
type Lbs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                uint32                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                                  // Номер устройства.
	ReceivingTime     uint32                   `protobuf:"varint,2,opt,name=receiving_time,json=receivingTime,proto3" json:"receiving_time,omitempty"`                                                       // Время приёма пакета замеренное на БС (миллисекунды прошедшие с начала суток по UTC).
	ReceivingRssi     int32                    `protobuf:"varint,3,opt,name=receiving_rssi,json=receivingRssi,proto3" json:"receiving_rssi,omitempty"`                                                       // RSSI замеренное на BS при приёме данных.
	ReceivingNois     int32                    `protobuf:"varint,4,opt,name=receiving_nois,json=receivingNois,proto3" json:"receiving_nois,omitempty"`                                                       // Уровень шума замеренный на BS при приёме данных.
	ThresholdRssi     int32                    `protobuf:"varint,5,opt,name=threshold_rssi,json=thresholdRssi,proto3" json:"threshold_rssi,omitempty"`                                                       // Порог записи АУ  по rssi  умноженный на минус 1.
	SuId              []uint32                 `protobuf:"varint,6,rep,packed,name=su_id,json=suId,proto3" json:"su_id,omitempty"`                                                                           // Список su устройств которые прошли порог.
	AdditionalMessage Lbs_AdditionalMessageLbs `protobuf:"varint,7,opt,name=additional_message,json=additionalMessage,proto3,enum=SlpProtocol.Lbs_AdditionalMessageLbs" json:"additional_message,omitempty"` // Дополнительное сообщение которые может передать устройство в стандартном сообщении.
}

func (x *Lbs) Reset() {
	*x = Lbs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_v9_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lbs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lbs) ProtoMessage() {}

func (x *Lbs) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_v9_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lbs.ProtoReflect.Descriptor instead.
func (*Lbs) Descriptor() ([]byte, []int) {
	return file_api_proto_v9_proto_rawDescGZIP(), []int{5}
}

func (x *Lbs) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Lbs) GetReceivingTime() uint32 {
	if x != nil {
		return x.ReceivingTime
	}
	return 0
}

func (x *Lbs) GetReceivingRssi() int32 {
	if x != nil {
		return x.ReceivingRssi
	}
	return 0
}

func (x *Lbs) GetReceivingNois() int32 {
	if x != nil {
		return x.ReceivingNois
	}
	return 0
}

func (x *Lbs) GetThresholdRssi() int32 {
	if x != nil {
		return x.ThresholdRssi
	}
	return 0
}

func (x *Lbs) GetSuId() []uint32 {
	if x != nil {
		return x.SuId
	}
	return nil
}

func (x *Lbs) GetAdditionalMessage() Lbs_AdditionalMessageLbs {
	if x != nil {
		return x.AdditionalMessage
	}
	return Lbs_adml_0
}

// Пакет с данными TS.
type Ts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                            // Номер устройства.
	ReceivingTime            uint32                 `protobuf:"varint,2,opt,name=receiving_time,json=receivingTime,proto3" json:"receiving_time,omitempty"` // Время приёма пакета замеренное на БС (миллисекунды прошедшие с начала суток по UTC).
	ReceivingRssi            int32                  `protobuf:"varint,3,opt,name=receiving_rssi,json=receivingRssi,proto3" json:"receiving_rssi,omitempty"` // RSSI замеренное на BS при приёме данных.
	ReceivingNois            int32                  `protobuf:"varint,4,opt,name=receiving_nois,json=receivingNois,proto3" json:"receiving_nois,omitempty"` // Уровень шума замеренный на BS при приёме данных.
	Hour                     uint32                 `protobuf:"varint,5,opt,name=hour,proto3" json:"hour,omitempty"`                                        // Текущее время по гринвичу.
	Minute                   uint32                 `protobuf:"varint,6,opt,name=minute,proto3" json:"minute,omitempty"`
	Second                   uint32                 `protobuf:"varint,7,opt,name=second,proto3" json:"second,omitempty"`
	Bat                      uint32                 `protobuf:"varint,8,opt,name=bat,proto3" json:"bat,omitempty"`                                                                                               // Уровень заряда батареи в процентах.
	Latitude                 float32                `protobuf:"fixed32,9,opt,name=latitude,proto3" json:"latitude,omitempty"`                                                                                    // Широта.
	Longitude                float32                `protobuf:"fixed32,10,opt,name=longitude,proto3" json:"longitude,omitempty"`                                                                                 // Долгота.
	Pressure                 float32                `protobuf:"fixed32,11,opt,name=pressure,proto3" json:"pressure,omitempty"`                                                                                   // Атмосферное давление в гектопаскалях.
	Hdop                     float32                `protobuf:"fixed32,12,opt,name=hdop,proto3" json:"hdop,omitempty"`                                                                                           // Коэффициент потери точности HDOP (1: ±3м , 99: ±350м).
	Temperature              float32                `protobuf:"fixed32,13,opt,name=temperature,proto3" json:"temperature,omitempty"`                                                                             // Температура на самом устройстве.
	TemperatureSensorValue_1 float32                `protobuf:"fixed32,14,opt,name=temperature_sensor_value_1,json=temperatureSensorValue1,proto3" json:"temperature_sensor_value_1,omitempty"`                  // Показания температуры первого температурного датчика.
	TemperatureSensorValue_2 float32                `protobuf:"fixed32,15,opt,name=temperature_sensor_value_2,json=temperatureSensorValue2,proto3" json:"temperature_sensor_value_2,omitempty"`                  // Показания температуры второго температурного датчика.
	TemperatureSensorValue_3 float32                `protobuf:"fixed32,16,opt,name=temperature_sensor_value_3,json=temperatureSensorValue3,proto3" json:"temperature_sensor_value_3,omitempty"`                  // Показания температуры третьего температурного датчика.
	TemperatureSensorValue_4 float32                `protobuf:"fixed32,17,opt,name=temperature_sensor_value_4,json=temperatureSensorValue4,proto3" json:"temperature_sensor_value_4,omitempty"`                  // Показания температуры четвёртого температурного датчика.
	AdditionalMessage        Ts_AdditionalMessageTs `protobuf:"varint,18,opt,name=additional_message,json=additionalMessage,proto3,enum=SlpProtocol.Ts_AdditionalMessageTs" json:"additional_message,omitempty"` // Дополнительное сообщение которые может передать устройство в стандартном сообщении.
}

func (x *Ts) Reset() {
	*x = Ts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_v9_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ts) ProtoMessage() {}

func (x *Ts) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_v9_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ts.ProtoReflect.Descriptor instead.
func (*Ts) Descriptor() ([]byte, []int) {
	return file_api_proto_v9_proto_rawDescGZIP(), []int{6}
}

func (x *Ts) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Ts) GetReceivingTime() uint32 {
	if x != nil {
		return x.ReceivingTime
	}
	return 0
}

func (x *Ts) GetReceivingRssi() int32 {
	if x != nil {
		return x.ReceivingRssi
	}
	return 0
}

func (x *Ts) GetReceivingNois() int32 {
	if x != nil {
		return x.ReceivingNois
	}
	return 0
}

func (x *Ts) GetHour() uint32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *Ts) GetMinute() uint32 {
	if x != nil {
		return x.Minute
	}
	return 0
}

func (x *Ts) GetSecond() uint32 {
	if x != nil {
		return x.Second
	}
	return 0
}

func (x *Ts) GetBat() uint32 {
	if x != nil {
		return x.Bat
	}
	return 0
}

func (x *Ts) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Ts) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Ts) GetPressure() float32 {
	if x != nil {
		return x.Pressure
	}
	return 0
}

func (x *Ts) GetHdop() float32 {
	if x != nil {
		return x.Hdop
	}
	return 0
}

func (x *Ts) GetTemperature() float32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *Ts) GetTemperatureSensorValue_1() float32 {
	if x != nil {
		return x.TemperatureSensorValue_1
	}
	return 0
}

func (x *Ts) GetTemperatureSensorValue_2() float32 {
	if x != nil {
		return x.TemperatureSensorValue_2
	}
	return 0
}

func (x *Ts) GetTemperatureSensorValue_3() float32 {
	if x != nil {
		return x.TemperatureSensorValue_3
	}
	return 0
}

func (x *Ts) GetTemperatureSensorValue_4() float32 {
	if x != nil {
		return x.TemperatureSensorValue_4
	}
	return 0
}

func (x *Ts) GetAdditionalMessage() Ts_AdditionalMessageTs {
	if x != nil {
		return x.AdditionalMessage
	}
	return Ts_admt_0
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Пакет с телеметрией базовой станции.
// BS -> Server.
type TelemetryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hour               int32   `protobuf:"varint,1,opt,name=hour,proto3" json:"hour,omitempty"` // Текущее время по гринвичу.
	Minute             int32   `protobuf:"varint,2,opt,name=minute,proto3" json:"minute,omitempty"`
	Second             int32   `protobuf:"varint,3,opt,name=second,proto3" json:"second,omitempty"`
	Latitude           float32 `protobuf:"fixed32,4,opt,name=latitude,proto3" json:"latitude,omitempty"`                                               // Широта
	Longitude          float32 `protobuf:"fixed32,5,opt,name=longitude,proto3" json:"longitude,omitempty"`                                             // Долгота
	FixQuality         int32   `protobuf:"varint,6,opt,name=fix_quality,json=fixQuality,proto3" json:"fix_quality,omitempty"`                          // Текущая фиксация GPS или GLONASS.
	TemperatureInside  float32 `protobuf:"fixed32,7,opt,name=temperature_inside,json=temperatureInside,proto3" json:"temperature_inside,omitempty"`    // Температура внутри корпуса.
	TemperatureOutside float32 `protobuf:"fixed32,8,opt,name=temperature_outside,json=temperatureOutside,proto3" json:"temperature_outside,omitempty"` // Температура снаружи.
	Pressure           float32 `protobuf:"fixed32,9,opt,name=pressure,proto3" json:"pressure,omitempty"`                                               // Давление в гПа.
}

func (x *TelemetryData) Reset() {
	*x = TelemetryData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_v9_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryData) ProtoMessage() {}

func (x *TelemetryData) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_v9_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryData.ProtoReflect.Descriptor instead.
func (*TelemetryData) Descriptor() ([]byte, []int) {
	return file_api_proto_v9_proto_rawDescGZIP(), []int{7}
}

func (x *TelemetryData) GetHour() int32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *TelemetryData) GetMinute() int32 {
	if x != nil {
		return x.Minute
	}
	return 0
}

func (x *TelemetryData) GetSecond() int32 {
	if x != nil {
		return x.Second
	}
	return 0
}

func (x *TelemetryData) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *TelemetryData) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *TelemetryData) GetFixQuality() int32 {
	if x != nil {
		return x.FixQuality
	}
	return 0
}

func (x *TelemetryData) GetTemperatureInside() float32 {
	if x != nil {
		return x.TemperatureInside
	}
	return 0
}

func (x *TelemetryData) GetTemperatureOutside() float32 {
	if x != nil {
		return x.TemperatureOutside
	}
	return 0
}

func (x *TelemetryData) GetPressure() float32 {
	if x != nil {
		return x.Pressure
	}
	return 0
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Пакет, подтверждающий приём slp пакетов от БС данных. Этот пакет должен отправляться сервером на каждый принятый slp пакет от БС.
// Server -> BS.
type ConfirmingPackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PacketId         uint32 `protobuf:"varint,1,opt,name=packet_id,json=packetId,proto3" json:"packet_id,omitempty"`                         // ID пакета. У каждого пакета требующего подтверждения свой id который инкрементируется с отправкой каждого пакета.
	PackageConfirmed bool   `protobuf:"varint,2,opt,name=package_confirmed,json=packageConfirmed,proto3" json:"package_confirmed,omitempty"` // true - пакет подтверждён; false - пакет требуется отправить повторно.
}

func (x *ConfirmingPackage) Reset() {
	*x = ConfirmingPackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_v9_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmingPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmingPackage) ProtoMessage() {}

func (x *ConfirmingPackage) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_v9_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmingPackage.ProtoReflect.Descriptor instead.
func (*ConfirmingPackage) Descriptor() ([]byte, []int) {
	return file_api_proto_v9_proto_rawDescGZIP(), []int{8}
}

func (x *ConfirmingPackage) GetPacketId() uint32 {
	if x != nil {
		return x.PacketId
	}
	return 0
}

func (x *ConfirmingPackage) GetPackageConfirmed() bool {
	if x != nil {
		return x.PackageConfirmed
	}
	return false
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Пакет с настройками базовой станции.
// BS -> Server и Server -> BS.
// Если поле нулевое то настраивать это поле не требуется.
type BsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BsId                             int32                 `protobuf:"varint,1,opt,name=bs_id,json=bsId,proto3" json:"bs_id,omitempty"`                                                                                               // Id базовой станции.
	SiteNumber                       int32                 `protobuf:"varint,2,opt,name=site_number,json=siteNumber,proto3" json:"site_number,omitempty"`                                                                             // Номер объекта. Может быть максимум 255(это ограничение связанно с тем что по радиоканалу на этот параметр отведён один байт)
	EncryptionType                   EncryptionTypes       `protobuf:"varint,3,opt,name=encryption_type,json=encryptionType,proto3,enum=SlpProtocol.EncryptionTypes" json:"encryption_type,omitempty"`                                // Тип шифрования канала.
	IsSyncPulseSendingOn             bool                  `protobuf:"varint,4,opt,name=is_sync_pulse_sending_on,json=isSyncPulseSendingOn,proto3" json:"is_sync_pulse_sending_on,omitempty"`                                         // Должна ли станция отправлять синхросигнал (будет она работать в режиме BS или BSS). true - отправлять, false - только слушать эфир.
	ServerIp                         []byte                `protobuf:"bytes,5,opt,name=server_ip,json=serverIp,proto3" json:"server_ip,omitempty"`                                                                                    // Ip адрес сервера.
	ServerPort                       int32                 `protobuf:"varint,6,opt,name=server_port,json=serverPort,proto3" json:"server_port,omitempty"`                                                                             // Порт сервера.
	PeriodOfSendingPacketWithGpsData int32                 `protobuf:"varint,7,opt,name=period_of_sending_packet_with_gps_data,json=periodOfSendingPacketWithGpsData,proto3" json:"period_of_sending_packet_with_gps_data,omitempty"` // Период (в секундах) отправки телеметрии БС. Через этот промежуток времени БС будет отправлять пакет TelemetryData.
	TimeOfResendingDataPackage       int32                 `protobuf:"varint,8,opt,name=time_of_resending_data_package,json=timeOfResendingDataPackage,proto3" json:"time_of_resending_data_package,omitempty"`                       // Период (в секундах) через который БС производит повторную отправку пакета SuData если ранее не было получено его потверждения.
	NumberOfAttemptsToSendDataPacket int32                 `protobuf:"varint,9,opt,name=number_of_attempts_to_send_data_packet,json=numberOfAttemptsToSendDataPacket,proto3" json:"number_of_attempts_to_send_data_packet,omitempty"` // Количество попыток повторной отправки пакета, после которой он будет удалён.
	LoggingLevel                     BsConfig_LoggingLevel `protobuf:"varint,10,opt,name=logging_level,json=loggingLevel,proto3,enum=SlpProtocol.BsConfig_LoggingLevel" json:"logging_level,omitempty"`                               // Уровень логирования станции.
}

func (x *BsConfig) Reset() {
	*x = BsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_v9_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BsConfig) ProtoMessage() {}

func (x *BsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_v9_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BsConfig.ProtoReflect.Descriptor instead.
func (*BsConfig) Descriptor() ([]byte, []int) {
	return file_api_proto_v9_proto_rawDescGZIP(), []int{9}
}

func (x *BsConfig) GetBsId() int32 {
	if x != nil {
		return x.BsId
	}
	return 0
}

func (x *BsConfig) GetSiteNumber() int32 {
	if x != nil {
		return x.SiteNumber
	}
	return 0
}

func (x *BsConfig) GetEncryptionType() EncryptionTypes {
	if x != nil {
		return x.EncryptionType
	}
	return EncryptionTypes_Undefined
}

func (x *BsConfig) GetIsSyncPulseSendingOn() bool {
	if x != nil {
		return x.IsSyncPulseSendingOn
	}
	return false
}

func (x *BsConfig) GetServerIp() []byte {
	if x != nil {
		return x.ServerIp
	}
	return nil
}

func (x *BsConfig) GetServerPort() int32 {
	if x != nil {
		return x.ServerPort
	}
	return 0
}

func (x *BsConfig) GetPeriodOfSendingPacketWithGpsData() int32 {
	if x != nil {
		return x.PeriodOfSendingPacketWithGpsData
	}
	return 0
}

func (x *BsConfig) GetTimeOfResendingDataPackage() int32 {
	if x != nil {
		return x.TimeOfResendingDataPackage
	}
	return 0
}

func (x *BsConfig) GetNumberOfAttemptsToSendDataPacket() int32 {
	if x != nil {
		return x.NumberOfAttemptsToSendDataPacket
	}
	return 0
}

func (x *BsConfig) GetLoggingLevel() BsConfig_LoggingLevel {
	if x != nil {
		return x.LoggingLevel
	}
	return BsConfig_logging_undefined
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// BS -> Server и Server -> BS.
// Данные с новой конфигурацией радиоканала. Если поле нулевое, то настраивать это поле не требуется.
type RadioConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SyncPulsePower                int32                          `protobuf:"varint,1,opt,name=sync_pulse_power,json=syncPulsePower,proto3" json:"sync_pulse_power,omitempty"`                                                             // Мощность синхроимпульса в dBm. Максимум 17.
	SuPower                       int32                          `protobuf:"varint,2,opt,name=su_power,json=suPower,proto3" json:"su_power,omitempty"`                                                                                    // Мощность сигнала всех АУ в dBm. Максимум 17.
	PollingPeriod                 RadioConfig_PollingPeriod      `protobuf:"varint,3,opt,name=polling_period,json=pollingPeriod,proto3,enum=SlpProtocol.RadioConfig_PollingPeriod" json:"polling_period,omitempty"`                       // Период опроса всех АУ.
	ShortSleepDuration            RadioConfig_ShortSleepDuration `protobuf:"varint,4,opt,name=short_sleep_duration,json=shortSleepDuration,proto3,enum=SlpProtocol.RadioConfig_ShortSleepDuration" json:"short_sleep_duration,omitempty"` // Период короткого сна.
	LongSleepDuration             RadioConfig_LongSleepDuration  `protobuf:"varint,5,opt,name=long_sleep_duration,json=longSleepDuration,proto3,enum=SlpProtocol.RadioConfig_LongSleepDuration" json:"long_sleep_duration,omitempty"`     // Период длинного сна.
	PeriodOfTheSyncPulseInMs      uint32                         `protobuf:"varint,6,opt,name=period_of_the_sync_pulse_in_ms,json=periodOfTheSyncPulseInMs,proto3" json:"period_of_the_sync_pulse_in_ms,omitempty"`                       // Период синхроимпульса в миллисекундах.
	SizeOfTheSyncPulseQueueOnSite uint32                         `protobuf:"varint,7,opt,name=size_of_the_sync_pulse_queue_on_site,json=sizeOfTheSyncPulseQueueOnSite,proto3" json:"size_of_the_sync_pulse_queue_on_site,omitempty"`      // Размер очереди синхроимпульса на объекте.
	PlaceInSyncPulseQueue         uint32                         `protobuf:"varint,8,opt,name=place_in_sync_pulse_queue,json=placeInSyncPulseQueue,proto3" json:"place_in_sync_pulse_queue,omitempty"`                                    // Место базовой станции в этой очереди.
}

func (x *RadioConfig) Reset() {
	*x = RadioConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_v9_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadioConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadioConfig) ProtoMessage() {}

func (x *RadioConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_v9_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadioConfig.ProtoReflect.Descriptor instead.
func (*RadioConfig) Descriptor() ([]byte, []int) {
	return file_api_proto_v9_proto_rawDescGZIP(), []int{10}
}

func (x *RadioConfig) GetSyncPulsePower() int32 {
	if x != nil {
		return x.SyncPulsePower
	}
	return 0
}

func (x *RadioConfig) GetSuPower() int32 {
	if x != nil {
		return x.SuPower
	}
	return 0
}

func (x *RadioConfig) GetPollingPeriod() RadioConfig_PollingPeriod {
	if x != nil {
		return x.PollingPeriod
	}
	return RadioConfig_p_undefined
}

func (x *RadioConfig) GetShortSleepDuration() RadioConfig_ShortSleepDuration {
	if x != nil {
		return x.ShortSleepDuration
	}
	return RadioConfig_s_undefined
}

func (x *RadioConfig) GetLongSleepDuration() RadioConfig_LongSleepDuration {
	if x != nil {
		return x.LongSleepDuration
	}
	return RadioConfig_l_undefined
}

func (x *RadioConfig) GetPeriodOfTheSyncPulseInMs() uint32 {
	if x != nil {
		return x.PeriodOfTheSyncPulseInMs
	}
	return 0
}

func (x *RadioConfig) GetSizeOfTheSyncPulseQueueOnSite() uint32 {
	if x != nil {
		return x.SizeOfTheSyncPulseQueueOnSite
	}
	return 0
}

func (x *RadioConfig) GetPlaceInSyncPulseQueue() uint32 {
	if x != nil {
		return x.PlaceInSyncPulseQueue
	}
	return 0
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Команда управления базовой станцией.
// Server -> BS.
type BsCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command  BsCommand_BaseStationCommands `protobuf:"varint,1,opt,name=command,proto3,enum=SlpProtocol.BsCommand_BaseStationCommands" json:"command,omitempty"` // Команда.
	Argument []byte                        `protobuf:"bytes,2,opt,name=argument,proto3" json:"argument,omitempty"`                                               // Аргумент команды.
}

func (x *BsCommand) Reset() {
	*x = BsCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_v9_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BsCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BsCommand) ProtoMessage() {}

func (x *BsCommand) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_v9_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BsCommand.ProtoReflect.Descriptor instead.
func (*BsCommand) Descriptor() ([]byte, []int) {
	return file_api_proto_v9_proto_rawDescGZIP(), []int{11}
}

func (x *BsCommand) GetCommand() BsCommand_BaseStationCommands {
	if x != nil {
		return x.Command
	}
	return BsCommand_Pass
}

func (x *BsCommand) GetArgument() []byte {
	if x != nil {
		return x.Argument
	}
	return nil
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Команда системе Slp.
// Server -> BS.
// Подать Slp команду на соответствующие действия в SLP системе на текущем объекте. Любая команда должна отправляться на все BSS которые находятся на объекте одновременно.
// Если одна из BSS не примет пакет с командой или примет невовремя, то устройства, которые покрываются этой BSS не получат соответствующее воздействие.
// У каждой команды есть свой time_point, опорная точка времени по которой все BSS на объекте отправляют команду синхронно. Это время когда необходимо отправить команду в ms прошедших
// c 1 00:00:00 1970 по UTC. Все станции распределят отправку команд по синхроимпульсам используя этот time_point как отправную точку. Необходимо учитывать, что т.к. минимальное
// время команды 4 периода синхроимпульса (поле period_of_the_sync_pulse_in_ms в радио конфигурации BSS) то минимальное расстояние между двумя time_point должно быть не меньше этого
// времени. Если команда требует отправки нескольких синхроимпульсов, то на всё это время командный канал занимается и time_point необходимо выставлять уже после завершения выполнения
// такой команды. После отправки SlpCommand на все станции каждая станция отправляет ответ ResponseToSlpCommand. Если хоть одна BSS не дала ответ, то рекомендуется отменить команду
// на всех BSS. При отправке команд, которые требует применения дополнительного канала необходимо выбрать master BSS канал которой будет использоваться (BSS с максимальным покрытием
// на объекте или специализированную BSS вокруг которой заранее будут собраны все устройства, например для перепрошивки). На объекте может быть только одна master BSS. Если по
// дополнительному каналу будут передавать сразу несколько BSS то это приведёт к критическим ошибкам в системе.
// В скобочках указан интервал в синхроимпульсах (интервал синхроимпульса это period_of_the_sync_pulse_in_ms, pp это безразмерный PollingPeriod(т.е. не в сек а в разах), N - это количество повторений заданное в аргументе).
type SlpCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                             // id команды (Инкрементируется в каждой поданной командой. После достижения uint16 обнуляется.)
	Type          SlpCommand_SlpCommands `protobuf:"varint,2,opt,name=type,proto3,enum=SlpProtocol.SlpCommand_SlpCommands" json:"type,omitempty"` // Тип команды.
	Argument_1    uint32                 `protobuf:"varint,3,opt,name=argument_1,json=argument1,proto3" json:"argument_1,omitempty"`              // Первый аргумент зависящий от типа команды.
	Argument_2    uint32                 `protobuf:"varint,4,opt,name=argument_2,json=argument2,proto3" json:"argument_2,omitempty"`              // Второй аргумент зависящий от типа команды.
	TimePoint     uint64                 `protobuf:"varint,5,opt,name=time_point,json=timePoint,proto3" json:"time_point,omitempty"`              // Опорная временная точка (смотри описание SlpCommand).
	MasterStation bool                   `protobuf:"varint,6,opt,name=master_station,json=masterStation,proto3" json:"master_station,omitempty"`  // Этот флаг взводится для master BSS (BSS которая отвечает за передачу по дополнительному каналу).
}

func (x *SlpCommand) Reset() {
	*x = SlpCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_v9_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlpCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlpCommand) ProtoMessage() {}

func (x *SlpCommand) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_v9_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlpCommand.ProtoReflect.Descriptor instead.
func (*SlpCommand) Descriptor() ([]byte, []int) {
	return file_api_proto_v9_proto_rawDescGZIP(), []int{12}
}

func (x *SlpCommand) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SlpCommand) GetType() SlpCommand_SlpCommands {
	if x != nil {
		return x.Type
	}
	return SlpCommand_command_u
}

func (x *SlpCommand) GetArgument_1() uint32 {
	if x != nil {
		return x.Argument_1
	}
	return 0
}

func (x *SlpCommand) GetArgument_2() uint32 {
	if x != nil {
		return x.Argument_2
	}
	return 0
}

func (x *SlpCommand) GetTimePoint() uint64 {
	if x != nil {
		return x.TimePoint
	}
	return 0
}

func (x *SlpCommand) GetMasterStation() bool {
	if x != nil {
		return x.MasterStation
	}
	return false
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Ответ от BSS на SlpCommand.
// BS -> Server.
type ResponseToSlpCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommandId uint32                             `protobuf:"varint,1,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`                              // id команды (Инкрементируется в каждой поданной командой. После достижения uint16 обнуляется.)
	Status    ResponseToSlpCommand_CommandStatus `protobuf:"varint,2,opt,name=status,proto3,enum=SlpProtocol.ResponseToSlpCommand_CommandStatus" json:"status,omitempty"` // Статус принятой команды.
}

func (x *ResponseToSlpCommand) Reset() {
	*x = ResponseToSlpCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_v9_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseToSlpCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseToSlpCommand) ProtoMessage() {}

func (x *ResponseToSlpCommand) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_v9_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseToSlpCommand.ProtoReflect.Descriptor instead.
func (*ResponseToSlpCommand) Descriptor() ([]byte, []int) {
	return file_api_proto_v9_proto_rawDescGZIP(), []int{13}
}

func (x *ResponseToSlpCommand) GetCommandId() uint32 {
	if x != nil {
		return x.CommandId
	}
	return 0
}

func (x *ResponseToSlpCommand) GetStatus() ResponseToSlpCommand_CommandStatus {
	if x != nil {
		return x.Status
	}
	return ResponseToSlpCommand_unknown_status
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Отменить Slp команду на станции.
// Server -> BS.
type ToCancelSlpCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommandId uint32 `protobuf:"varint,1,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"` // id команды (Инкрементируется в каждой поданной командой. После достижения uint16 обнуляется.)
}

func (x *ToCancelSlpCommand) Reset() {
	*x = ToCancelSlpCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_v9_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToCancelSlpCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToCancelSlpCommand) ProtoMessage() {}

func (x *ToCancelSlpCommand) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_v9_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToCancelSlpCommand.ProtoReflect.Descriptor instead.
func (*ToCancelSlpCommand) Descriptor() ([]byte, []int) {
	return file_api_proto_v9_proto_rawDescGZIP(), []int{14}
}

func (x *ToCancelSlpCommand) GetCommandId() uint32 {
	if x != nil {
		return x.CommandId
	}
	return 0
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// BS отправляет этот пакет когда, ей необходимо оценить качество соединения с сервером.
// BS -> Server.
type CheckingConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CheckingConnection) Reset() {
	*x = CheckingConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_v9_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckingConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckingConnection) ProtoMessage() {}

func (x *CheckingConnection) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_v9_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckingConnection.ProtoReflect.Descriptor instead.
func (*CheckingConnection) Descriptor() ([]byte, []int) {
	return file_api_proto_v9_proto_rawDescGZIP(), []int{15}
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Сегмент с сервисным пакетом.
// Server -> BS.
// Сервисный пакет, который необходимо залить на станцию (например пакет с эпохами или прошивкой для различных устройств).
type ServicePackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          ServicePacketTypes `protobuf:"varint,1,opt,name=type,proto3,enum=SlpProtocol.ServicePacketTypes" json:"type,omitempty"`
	Version       uint32             `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`                                    // Версия прошивки для Firmware и день в году для Agps (значимыми являются только первые два байта т.е. максимум 65536)
	Payload       []byte             `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`                                     // Payload. 4 Kbyte (4096 байт). Последний сегмент может быть меньщего размера.
	SegmentNumber uint32             `protobuf:"varint,4,opt,name=segment_number,json=segmentNumber,proto3" json:"segment_number,omitempty"`   // Номер текущего сегмента пакета (отсчёт начинается с 0).
	NumberOfBytes uint32             `protobuf:"varint,5,opt,name=number_of_bytes,json=numberOfBytes,proto3" json:"number_of_bytes,omitempty"` // Количество байт в текущем ServicePackage.
	Crc           uint32             `protobuf:"varint,6,opt,name=crc,proto3" json:"crc,omitempty"`                                            // Crc modbus 16 всего пакета (всех сегментов).
}

func (x *ServicePackage) Reset() {
	*x = ServicePackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_v9_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServicePackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServicePackage) ProtoMessage() {}

func (x *ServicePackage) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_v9_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServicePackage.ProtoReflect.Descriptor instead.
func (*ServicePackage) Descriptor() ([]byte, []int) {
	return file_api_proto_v9_proto_rawDescGZIP(), []int{16}
}

func (x *ServicePackage) GetType() ServicePacketTypes {
	if x != nil {
		return x.Type
	}
	return ServicePacketTypes_UnknownType
}

func (x *ServicePackage) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ServicePackage) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *ServicePackage) GetSegmentNumber() uint32 {
	if x != nil {
		return x.SegmentNumber
	}
	return 0
}

func (x *ServicePackage) GetNumberOfBytes() uint32 {
	if x != nil {
		return x.NumberOfBytes
	}
	return 0
}

func (x *ServicePackage) GetCrc() uint32 {
	if x != nil {
		return x.Crc
	}
	return 0
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Запрос состояния сервисного пакета на BS.
// Server -> BS.
// Запросить у бс состояние текущего сервисного пакета.
type ServicePackageStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    ServicePacketTypes `protobuf:"varint,1,opt,name=type,proto3,enum=SlpProtocol.ServicePacketTypes" json:"type,omitempty"` // Тип сервисного пакета.
	Version uint32             `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`                               // Версия прошивки для Firmware и день в году для Agps (значимыми являются только первые два байта т.е. максимум 65536)
	Crc     uint32             `protobuf:"varint,3,opt,name=crc,proto3" json:"crc,omitempty"`                                       // Crc modbus 16 всего пакета (всех сегментов).
}

func (x *ServicePackageStatusRequest) Reset() {
	*x = ServicePackageStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_v9_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServicePackageStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServicePackageStatusRequest) ProtoMessage() {}

func (x *ServicePackageStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_v9_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServicePackageStatusRequest.ProtoReflect.Descriptor instead.
func (*ServicePackageStatusRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_v9_proto_rawDescGZIP(), []int{17}
}

func (x *ServicePackageStatusRequest) GetType() ServicePacketTypes {
	if x != nil {
		return x.Type
	}
	return ServicePacketTypes_UnknownType
}

func (x *ServicePackageStatusRequest) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ServicePackageStatusRequest) GetCrc() uint32 {
	if x != nil {
		return x.Crc
	}
	return 0
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Ответ на запрос состояния сервисного пакета на BS.
// BS -> Server.
// Ответ BS на ServicePackageStatusRequest.
type ServicePackageStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            ServicePacketTypes                          `protobuf:"varint,1,opt,name=type,proto3,enum=SlpProtocol.ServicePacketTypes" json:"type,omitempty"`                              // Тип сервисного пакета.
	Version         uint32                                      `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`                                                            // Версия прошивки для Firmware и день в году для Agps (значимыми являются только первые два байта т.е. максимум 65536)
	Status          ServicePackageStatusResponse_ResponseStatus `protobuf:"varint,3,opt,name=status,proto3,enum=SlpProtocol.ServicePackageStatusResponse_ResponseStatus" json:"status,omitempty"` // Ответ.
	MissingSegments []uint32                                    `protobuf:"varint,4,rep,packed,name=missing_segments,json=missingSegments,proto3" json:"missing_segments,omitempty"`              // Тут перечислены все номера недостающих сегментов сервисного пакета если пакет неполный.
}

func (x *ServicePackageStatusResponse) Reset() {
	*x = ServicePackageStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_v9_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServicePackageStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServicePackageStatusResponse) ProtoMessage() {}

func (x *ServicePackageStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_v9_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServicePackageStatusResponse.ProtoReflect.Descriptor instead.
func (*ServicePackageStatusResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_v9_proto_rawDescGZIP(), []int{18}
}

func (x *ServicePackageStatusResponse) GetType() ServicePacketTypes {
	if x != nil {
		return x.Type
	}
	return ServicePacketTypes_UnknownType
}

func (x *ServicePackageStatusResponse) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ServicePackageStatusResponse) GetStatus() ServicePackageStatusResponse_ResponseStatus {
	if x != nil {
		return x.Status
	}
	return ServicePackageStatusResponse_rs_package_ready
}

func (x *ServicePackageStatusResponse) GetMissingSegments() []uint32 {
	if x != nil {
		return x.MissingSegments
	}
	return nil
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Удаление сервисного пакета на BS.
// Server -> BS.
// Удаление сервисного пакета на BS.
type RemoveServicePackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    ServicePacketTypes `protobuf:"varint,1,opt,name=type,proto3,enum=SlpProtocol.ServicePacketTypes" json:"type,omitempty"` // Тип сервисного пакета.
	Version uint32             `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`                               // Версия прошивки для Firmware и день в году для Agps (значимыми являются только первые два байта т.е. максимум 65536)
}

func (x *RemoveServicePackage) Reset() {
	*x = RemoveServicePackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_v9_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveServicePackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveServicePackage) ProtoMessage() {}

func (x *RemoveServicePackage) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_v9_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveServicePackage.ProtoReflect.Descriptor instead.
func (*RemoveServicePackage) Descriptor() ([]byte, []int) {
	return file_api_proto_v9_proto_rawDescGZIP(), []int{19}
}

func (x *RemoveServicePackage) GetType() ServicePacketTypes {
	if x != nil {
		return x.Type
	}
	return ServicePacketTypes_UnknownType
}

func (x *RemoveServicePackage) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Запрос на регистрацию устройства (тип 1).
// BS -> Server
type DeviceRegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId     uint32     `protobuf:"varint,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`                                   // Номер устройства.
	DeviceType   DeviceType `protobuf:"varint,2,opt,name=device_type,json=deviceType,proto3,enum=SlpProtocol.DeviceType" json:"device_type,omitempty"` // Тип устройства
	SerialNumber uint32     `protobuf:"varint,3,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`                       // Серийный номер устройства.
	SiteNumber   int32      `protobuf:"varint,4,opt,name=site_number,json=siteNumber,proto3" json:"site_number,omitempty"`                             // Номер объекта.
}

func (x *DeviceRegistrationRequest) Reset() {
	*x = DeviceRegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_v9_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceRegistrationRequest) ProtoMessage() {}

func (x *DeviceRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_v9_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceRegistrationRequest.ProtoReflect.Descriptor instead.
func (*DeviceRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_v9_proto_rawDescGZIP(), []int{20}
}

func (x *DeviceRegistrationRequest) GetDeviceId() uint32 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

func (x *DeviceRegistrationRequest) GetDeviceType() DeviceType {
	if x != nil {
		return x.DeviceType
	}
	return DeviceType_empty
}

func (x *DeviceRegistrationRequest) GetSerialNumber() uint32 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *DeviceRegistrationRequest) GetSiteNumber() int32 {
	if x != nil {
		return x.SiteNumber
	}
	return 0
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Передача версии прошивки устройства SLP (тип 5).
// BS -> Server
type DeviceFirmwareVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId        uint32     `protobuf:"varint,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`                                   // Номер устройства.
	DeviceType      DeviceType `protobuf:"varint,2,opt,name=device_type,json=deviceType,proto3,enum=SlpProtocol.DeviceType" json:"device_type,omitempty"` // Тип устройства
	FirmwareVersion uint32     `protobuf:"varint,3,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`              // Версия прошивки (не более двух байт).
	SiteNumber      int32      `protobuf:"varint,4,opt,name=site_number,json=siteNumber,proto3" json:"site_number,omitempty"`                             // Номер объекта.
	Hour            uint32     `protobuf:"varint,5,opt,name=hour,proto3" json:"hour,omitempty"`                                                           // Текущее время по гринвичу.
	Minute          uint32     `protobuf:"varint,6,opt,name=minute,proto3" json:"minute,omitempty"`
	Second          uint32     `protobuf:"varint,7,opt,name=second,proto3" json:"second,omitempty"`
	Bat             uint32     `protobuf:"varint,8,opt,name=bat,proto3" json:"bat,omitempty"`                  // Уровень заряда батареи в процентах.
	Temperature     float32    `protobuf:"fixed32,9,opt,name=temperature,proto3" json:"temperature,omitempty"` // Температура.
}

func (x *DeviceFirmwareVersion) Reset() {
	*x = DeviceFirmwareVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_v9_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceFirmwareVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceFirmwareVersion) ProtoMessage() {}

func (x *DeviceFirmwareVersion) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_v9_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceFirmwareVersion.ProtoReflect.Descriptor instead.
func (*DeviceFirmwareVersion) Descriptor() ([]byte, []int) {
	return file_api_proto_v9_proto_rawDescGZIP(), []int{21}
}

func (x *DeviceFirmwareVersion) GetDeviceId() uint32 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

func (x *DeviceFirmwareVersion) GetDeviceType() DeviceType {
	if x != nil {
		return x.DeviceType
	}
	return DeviceType_empty
}

func (x *DeviceFirmwareVersion) GetFirmwareVersion() uint32 {
	if x != nil {
		return x.FirmwareVersion
	}
	return 0
}

func (x *DeviceFirmwareVersion) GetSiteNumber() int32 {
	if x != nil {
		return x.SiteNumber
	}
	return 0
}

func (x *DeviceFirmwareVersion) GetHour() uint32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *DeviceFirmwareVersion) GetMinute() uint32 {
	if x != nil {
		return x.Minute
	}
	return 0
}

func (x *DeviceFirmwareVersion) GetSecond() uint32 {
	if x != nil {
		return x.Second
	}
	return 0
}

func (x *DeviceFirmwareVersion) GetBat() uint32 {
	if x != nil {
		return x.Bat
	}
	return 0
}

func (x *DeviceFirmwareVersion) GetTemperature() float32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Потдтверждеине регистрации устройства SLP (тип 6).
// BS -> Server
type ConfirmDeviceRegistration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId     uint32     `protobuf:"varint,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`                                   // Номер устройства.
	DeviceType   DeviceType `protobuf:"varint,2,opt,name=device_type,json=deviceType,proto3,enum=SlpProtocol.DeviceType" json:"device_type,omitempty"` // Тип устройства
	SerialNumber uint32     `protobuf:"varint,3,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`                       // Серийный номер устройства.
	SiteNumber   int32      `protobuf:"varint,4,opt,name=site_number,json=siteNumber,proto3" json:"site_number,omitempty"`                             // Номер объекта.
	Hour         uint32     `protobuf:"varint,5,opt,name=hour,proto3" json:"hour,omitempty"`                                                           // Текущее время по гринвичу.
	Minute       uint32     `protobuf:"varint,6,opt,name=minute,proto3" json:"minute,omitempty"`
	Second       uint32     `protobuf:"varint,7,opt,name=second,proto3" json:"second,omitempty"`
	Bat          uint32     `protobuf:"varint,8,opt,name=bat,proto3" json:"bat,omitempty"`                  // Уровень заряда батареи в процентах.
	Temperature  float32    `protobuf:"fixed32,9,opt,name=temperature,proto3" json:"temperature,omitempty"` // Температура.
}

func (x *ConfirmDeviceRegistration) Reset() {
	*x = ConfirmDeviceRegistration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_v9_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmDeviceRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmDeviceRegistration) ProtoMessage() {}

func (x *ConfirmDeviceRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_v9_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmDeviceRegistration.ProtoReflect.Descriptor instead.
func (*ConfirmDeviceRegistration) Descriptor() ([]byte, []int) {
	return file_api_proto_v9_proto_rawDescGZIP(), []int{22}
}

func (x *ConfirmDeviceRegistration) GetDeviceId() uint32 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

func (x *ConfirmDeviceRegistration) GetDeviceType() DeviceType {
	if x != nil {
		return x.DeviceType
	}
	return DeviceType_empty
}

func (x *ConfirmDeviceRegistration) GetSerialNumber() uint32 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *ConfirmDeviceRegistration) GetSiteNumber() int32 {
	if x != nil {
		return x.SiteNumber
	}
	return 0
}

func (x *ConfirmDeviceRegistration) GetHour() uint32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *ConfirmDeviceRegistration) GetMinute() uint32 {
	if x != nil {
		return x.Minute
	}
	return 0
}

func (x *ConfirmDeviceRegistration) GetSecond() uint32 {
	if x != nil {
		return x.Second
	}
	return 0
}

func (x *ConfirmDeviceRegistration) GetBat() uint32 {
	if x != nil {
		return x.Bat
	}
	return 0
}

func (x *ConfirmDeviceRegistration) GetTemperature() float32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Зарегистрировать устройство в системе.
// Этот пакет отправляется как ответ на запрос устройства на регистрацию.
// Server -> BS
type RegisterDeviceInSystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        RegisterDeviceInSystem_Status `protobuf:"varint,1,opt,name=status,proto3,enum=SlpProtocol.RegisterDeviceInSystem_Status" json:"status,omitempty"`
	DeviceId      uint32                        `protobuf:"varint,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`                // Номер устройства.
	SerialNumber  uint32                        `protobuf:"varint,3,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`    // Серийный номер устройства.
	SiteNumber    int32                         `protobuf:"varint,4,opt,name=site_number,json=siteNumber,proto3" json:"site_number,omitempty"`          // Номер объекта.
	RssiThreshold int32                         `protobuf:"varint,5,opt,name=rssi_threshold,json=rssiThreshold,proto3" json:"rssi_threshold,omitempty"` // Порог rssi (только для LBS).
}

func (x *RegisterDeviceInSystem) Reset() {
	*x = RegisterDeviceInSystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_v9_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterDeviceInSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterDeviceInSystem) ProtoMessage() {}

func (x *RegisterDeviceInSystem) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_v9_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterDeviceInSystem.ProtoReflect.Descriptor instead.
func (*RegisterDeviceInSystem) Descriptor() ([]byte, []int) {
	return file_api_proto_v9_proto_rawDescGZIP(), []int{23}
}

func (x *RegisterDeviceInSystem) GetStatus() RegisterDeviceInSystem_Status {
	if x != nil {
		return x.Status
	}
	return RegisterDeviceInSystem_Refusal
}

func (x *RegisterDeviceInSystem) GetDeviceId() uint32 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

func (x *RegisterDeviceInSystem) GetSerialNumber() uint32 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *RegisterDeviceInSystem) GetSiteNumber() int32 {
	if x != nil {
		return x.SiteNumber
	}
	return 0
}

func (x *RegisterDeviceInSystem) GetRssiThreshold() int32 {
	if x != nil {
		return x.RssiThreshold
	}
	return 0
}

var File_api_proto_v9_proto protoreflect.FileDescriptor

var file_api_proto_v9_proto_rawDesc = []byte{
	0x0a, 0x12, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x39, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x53, 0x6c, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x22, 0x8e, 0x02, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x62, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x62, 0x73, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x73, 0x69, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x45, 0x0a,
	0x0f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x53, 0x6c, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x52, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x73,
	0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73,
	0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x69, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x46, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x22, 0xee, 0x04, 0x0a, 0x0a, 0x53,
	0x6c, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x53, 0x6c, 0x70,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x6c, 0x70, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x53, 0x6c, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xb5, 0x03, 0x0a, 0x0f, 0x53, 0x6c, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x75, 0x44, 0x61, 0x74,
	0x61, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x42, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x52,
	0x61, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a,
	0x53, 0x6c, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x53, 0x6c, 0x70, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x6f, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x53, 0x6c, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x10, 0x07, 0x12, 0x16,
	0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x10, 0x09, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x0a, 0x12, 0x20, 0x0a, 0x1c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x0b, 0x12, 0x1d, 0x0a,
	0x19, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x0c, 0x12, 0x19, 0x0a, 0x15,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x0d, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0e, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x10, 0x0f,
	0x12, 0x0d, 0x0a, 0x09, 0x42, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x10, 0x10, 0x12,
	0x1a, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x10, 0x11, 0x22, 0x9d, 0x01, 0x0a, 0x06,
	0x53, 0x75, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x75,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53, 0x6c,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x75, 0x52, 0x06, 0x73, 0x75,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x08, 0x4c, 0x62, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x53, 0x6c, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4c, 0x62, 0x73, 0x52, 0x07, 0x4c, 0x62, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x28, 0x0a, 0x07, 0x54, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53, 0x6c, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x54, 0x73, 0x52, 0x06, 0x54, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xe2, 0x08, 0x0a, 0x02,
	0x53, 0x75, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67,
	0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x52, 0x73, 0x73, 0x69, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x69, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x69,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x62, 0x61, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x61, 0x6c, 0x61, 0x72, 0x6d,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x53, 0x6c, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x75, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x05, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x2b,
	0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69,
	0x74, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x69, 0x78, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x66, 0x69, 0x78, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x64, 0x6f, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x68, 0x64, 0x6f, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x7a, 0x69, 0x6d, 0x75, 0x74, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x61, 0x7a, 0x69, 0x6d, 0x75, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6f, 0x66, 0x5f, 0x6d,
	0x6f, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x4f, 0x66, 0x4d, 0x6f, 0x74, 0x6f,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x5f,
	0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x6e, 0x52, 0x6f,
	0x6f, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x63, 0x63, 0x65, 0x6c,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x52, 0x0a,
	0x12, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x53, 0x6c, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x75, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x75, 0x52, 0x11,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x5f, 0x78, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x65,
	0x6c, 0x65, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x58, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63,
	0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x79, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x59, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x5f, 0x7a, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x63,
	0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5a, 0x22, 0x51, 0x0a, 0x13,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x75, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x64, 0x6d, 0x73, 0x5f, 0x30, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x61, 0x64, 0x6d, 0x73, 0x5f, 0x31, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x61,
	0x64, 0x6d, 0x73, 0x5f, 0x32, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x64, 0x6d, 0x73, 0x5f,
	0x33, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x64, 0x6d, 0x73, 0x5f, 0x34, 0x10, 0x0b, 0x22,
	0x5f, 0x0a, 0x09, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08,
	0x6e, 0x6f, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x10, 0x01, 0x12,
	0x1c, 0x0a, 0x18, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x10, 0x02, 0x12, 0x11, 0x0a,
	0x0d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x10, 0x03,
	0x22, 0xcc, 0x02, 0x0a, 0x03, 0x4c, 0x62, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x73, 0x73,
	0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69,
	0x6e, 0x67, 0x52, 0x73, 0x73, 0x69, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x69, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x69, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x52, 0x73, 0x73, 0x69, 0x12, 0x13, 0x0a, 0x05, 0x73, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x75, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x12, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x53, 0x6c, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x4c, 0x62, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x62, 0x73, 0x52, 0x11, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x2e, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4c, 0x62, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x64, 0x6d, 0x6c, 0x5f,
	0x30, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x64, 0x6d, 0x6c, 0x5f, 0x31, 0x10, 0x0b, 0x22,
	0xe2, 0x05, 0x0a, 0x02, 0x54, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67,
	0x52, 0x73, 0x73, 0x69, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e,
	0x67, 0x5f, 0x6e, 0x6f, 0x69, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x69, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x6f, 0x75, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x62, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x62, 0x61,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x64, 0x6f, 0x70, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x68, 0x64, 0x6f, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x74,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3b, 0x0a,
	0x1a, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x31, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x17, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x12, 0x3b, 0x0a, 0x1a, 0x74, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x32, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x12, 0x3b, 0x0a, 0x1a, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x33, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17, 0x74, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x33, 0x12, 0x3b, 0x0a, 0x1a, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x34, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x34, 0x12, 0x52, 0x0a, 0x12, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x53, 0x6c, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x73, 0x2e, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x73, 0x52, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2d, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x73, 0x12, 0x0a, 0x0a, 0x06,
	0x61, 0x64, 0x6d, 0x74, 0x5f, 0x30, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x64, 0x6d, 0x74,
	0x5f, 0x31, 0x10, 0x0b, 0x22, 0xaa, 0x02, 0x0a, 0x0d, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x78, 0x5f, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x69, 0x78, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x11, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e,
	0x73, 0x69, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x12, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x75,
	0x74, 0x73, 0x69, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72,
	0x65, 0x22, 0x5d, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64,
	0x22, 0xee, 0x05, 0x0a, 0x08, 0x42, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x13, 0x0a,
	0x05, 0x62, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x62, 0x73,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x69, 0x74, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x53,
	0x6c, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x0e, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x18, 0x69, 0x73,
	0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73,
	0x53, 0x79, 0x6e, 0x63, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x4f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x50, 0x0a, 0x26, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x67, 0x70, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x20, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4f, 0x66, 0x53, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x47, 0x70, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x42, 0x0a, 0x1e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x74, 0x69, 0x6d, 0x65,
	0x4f, 0x66, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x50, 0x0a, 0x26, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x5f,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x54, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x47, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x53, 0x6c, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x22, 0xbd, 0x01, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x15, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x6c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x12,
	0x24, 0x0a, 0x20, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x6e, 0x6f, 0x6d, 0x61, 0x6c,
	0x69, 0x65, 0x73, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x69, 0x65, 0x73, 0x10, 0x03,
	0x12, 0x14, 0x0a, 0x10, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x10, 0x04, 0x12, 0x29, 0x0a, 0x25, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x64, 0x65, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x05, 0x22, 0xed, 0x07, 0x0a, 0x0b, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x79, 0x6e,
	0x63, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x75, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73,
	0x75, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0e, 0x70, 0x6f, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x53, 0x6c, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x61, 0x64,
	0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x0d, 0x70, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x5d, 0x0a, 0x14, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x73,
	0x6c, 0x65, 0x65, 0x70, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x53, 0x6c, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x12, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x13, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x73, 0x6c, 0x65,
	0x65, 0x70, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2a, 0x2e, 0x53, 0x6c, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x52, 0x61, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x6f, 0x6e, 0x67,
	0x53, 0x6c, 0x65, 0x65, 0x70, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6c,
	0x6f, 0x6e, 0x67, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x40, 0x0a, 0x1e, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x68,
	0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f,
	0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x4f, 0x66, 0x54, 0x68, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x49, 0x6e,
	0x4d, 0x73, 0x12, 0x4b, 0x0a, 0x24, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x68,
	0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1d, 0x73, 0x69, 0x7a, 0x65, 0x4f, 0x66, 0x54, 0x68, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x50,
	0x75, 0x6c, 0x73, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4f, 0x6e, 0x53, 0x69, 0x74, 0x65, 0x12,
	0x38, 0x0a, 0x19, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x15, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x50,
	0x75, 0x6c, 0x73, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x0d, 0x50, 0x6f,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x0f, 0x0a, 0x0b, 0x70,
	0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15,
	0x70, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x33, 0x30, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x70, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x36, 0x30, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x70, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x32, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14,
	0x70, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x33, 0x5f, 0x6d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x73, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x70, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x35, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x10, 0x05,
	0x22, 0x90, 0x01, 0x0a, 0x12, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x73, 0x5f, 0x75, 0x6e, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x73, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x31, 0x32, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x73, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x32, 0x34, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x10, 0x02, 0x12, 0x19,
	0x0a, 0x15, 0x73, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x36, 0x30, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x73, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x73, 0x10, 0x04, 0x22, 0x8b, 0x01, 0x0a, 0x11, 0x4c, 0x6f, 0x6e, 0x67, 0x53, 0x6c, 0x65, 0x65,
	0x70, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x6c, 0x5f, 0x75,
	0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x6c, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x73, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x6c, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x31, 0x30, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x10, 0x02, 0x12,
	0x19, 0x0a, 0x15, 0x6c, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x33, 0x30,
	0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x6c, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x31, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x10,
	0x04, 0x22, 0xdb, 0x01, 0x0a, 0x09, 0x42, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x44, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2a, 0x2e, 0x53, 0x6c, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42,
	0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x6c, 0x0a, 0x13, 0x42, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x61, 0x73, 0x73,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x65, 0x73, 0x65, 0x74, 0x10, 0x01, 0x12, 0x11, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x42, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x10, 0x02,
	0x12, 0x14, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x41, 0x6c, 0x6c, 0x53, 0x6c, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x10, 0x04, 0x22,
	0xaf, 0x03, 0x0a, 0x0a, 0x53, 0x6c, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x53,
	0x6c, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x6c, 0x70, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x6c, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x73, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x31, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x32, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd3, 0x01, 0x0a, 0x0b,
	0x53, 0x6c, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x75, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x31, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x32, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x5f, 0x33, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x5f, 0x34, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x5f, 0x35, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x5f, 0x36, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f,
	0x37, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x38,
	0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x39, 0x10,
	0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x31, 0x30, 0x10,
	0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x31, 0x31, 0x10,
	0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x31, 0x32, 0x10,
	0x0c, 0x22, 0xde, 0x02, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f,
	0x53, 0x6c, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x53, 0x6c, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x54, 0x6f, 0x53, 0x6c, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xdd, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x10,
	0x01, 0x12, 0x23, 0x0a, 0x1f, 0x65, 0x72, 0x72, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x75,
	0x6c, 0x73, 0x65, 0x5f, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x6f, 0x63, 0x63, 0x75,
	0x70, 0x69, 0x65, 0x64, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x65, 0x72, 0x72, 0x5f, 0x6e, 0x6f,
	0x74, 0x5f, 0x68, 0x61, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x74,
	0x61, 0x6b, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x10, 0x03,
	0x12, 0x23, 0x0a, 0x1f, 0x65, 0x72, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x5f, 0x69, 0x5f, 0x69,
	0x73, 0x5f, 0x62, 0x73, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x65, 0x72, 0x72, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x6f, 0x5f, 0x66, 0x61, 0x72,
	0x10, 0x06, 0x22, 0x33, 0x0a, 0x12, 0x54, 0x6f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x6c,
	0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xda, 0x01,
	0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x53, 0x6c, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x72, 0x63, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x72, 0x63, 0x22, 0x7e, 0x0a, 0x1b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x53, 0x6c, 0x70, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x72, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x72, 0x63, 0x22, 0xd0, 0x02, 0x0a, 0x1c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x53, 0x6c, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x53, 0x6c, 0x70,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x10,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x64, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x10, 0x72, 0x73, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x10, 0x00, 0x12,
	0x13, 0x0a, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x63, 0x72, 0x63, 0x10, 0x03, 0x22, 0x65, 0x0a,
	0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x53, 0x6c, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb8, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x38, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x53, 0x6c, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x69, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0xb2, 0x02, 0x0a, 0x15, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x53, 0x6c,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x69, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x73, 0x69, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x6f, 0x75, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x62, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x62,
	0x61, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0xb0, 0x02, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x38, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x53, 0x6c, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x69, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x68,
	0x6f, 0x75, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x62, 0x61, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xc5, 0x02, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x12, 0x42, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x53, 0x6c, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x74, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73,
	0x69, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x73, 0x73,
	0x69, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x72, 0x73, 0x73, 0x69, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x22, 0x5d, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x65,
	0x66, 0x75, 0x73, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d,
	0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x03, 0x2a,
	0x20, 0x0a, 0x12, 0x53, 0x6c, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x39, 0x5f, 0x35, 0x5f, 0x31, 0x10,
	0x00, 0x2a, 0x4a, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x09, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x73, 0x75,
	0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x74, 0x73, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x6c, 0x62,
	0x73, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x73, 0x75, 0x66, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02,
	0x62, 0x73, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x62, 0x73, 0x73, 0x10, 0x06, 0x2a, 0xc7, 0x01,
	0x0a, 0x0f, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x65,
	0x73, 0x5f, 0x31, 0x32, 0x38, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x65, 0x73, 0x5f, 0x32,
	0x35, 0x36, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x65, 0x73, 0x10, 0x04, 0x12, 0x10, 0x0a,
	0x0c, 0x43, 0x61, 0x6d, 0x65, 0x6c, 0x6c, 0x69, 0x61, 0x5f, 0x31, 0x32, 0x38, 0x10, 0x05, 0x12,
	0x10, 0x0a, 0x0c, 0x43, 0x61, 0x6d, 0x65, 0x6c, 0x6c, 0x69, 0x61, 0x5f, 0x32, 0x35, 0x36, 0x10,
	0x06, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x61, 0x73, 0x74, 0x35, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04,
	0x49, 0x64, 0x65, 0x61, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x63, 0x32, 0x10, 0x09, 0x12,
	0x07, 0x0a, 0x03, 0x52, 0x63, 0x34, 0x10, 0x0a, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x65, 0x65, 0x64,
	0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x63, 0x68, 0x61, 0x32, 0x30, 0x10, 0x0c,
	0x12, 0x07, 0x0a, 0x03, 0x53, 0x6d, 0x34, 0x10, 0x0d, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x6c, 0x6f,
	0x77, 0x66, 0x69, 0x73, 0x68, 0x10, 0x0e, 0x2a, 0x4f, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x0f, 0x0a,
	0x0b, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x41, 0x67, 0x70, 0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x75, 0x46, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x73, 0x46, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x10, 0x03, 0x42, 0x0a, 0x5a, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x39, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_proto_v9_proto_rawDescOnce sync.Once
	file_api_proto_v9_proto_rawDescData = file_api_proto_v9_proto_rawDesc
)

func file_api_proto_v9_proto_rawDescGZIP() []byte {
	file_api_proto_v9_proto_rawDescOnce.Do(func() {
		file_api_proto_v9_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proto_v9_proto_rawDescData)
	})
	return file_api_proto_v9_proto_rawDescData
}

var file_api_proto_v9_proto_enumTypes = make([]protoimpl.EnumInfo, 18)
var file_api_proto_v9_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_api_proto_v9_proto_goTypes = []interface{}{
	(SlpProtocolVersion)(0),                          // 0: SlpProtocol.SlpProtocolVersion
	(DeviceType)(0),                                  // 1: SlpProtocol.DeviceType
	(EncryptionTypes)(0),                             // 2: SlpProtocol.EncryptionTypes
	(ServicePacketTypes)(0),                          // 3: SlpProtocol.ServicePacketTypes
	(SlpMessage_SlpMessageTypes)(0),                  // 4: SlpProtocol.SlpMessage.SlpMessageTypes
	(Su_AdditionalMessageSu)(0),                      // 5: SlpProtocol.Su.AdditionalMessageSu
	(Su_AlarmType)(0),                                // 6: SlpProtocol.Su.AlarmType
	(Lbs_AdditionalMessageLbs)(0),                    // 7: SlpProtocol.Lbs.AdditionalMessageLbs
	(Ts_AdditionalMessageTs)(0),                      // 8: SlpProtocol.Ts.AdditionalMessageTs
	(BsConfig_LoggingLevel)(0),                       // 9: SlpProtocol.BsConfig.LoggingLevel
	(RadioConfig_PollingPeriod)(0),                   // 10: SlpProtocol.RadioConfig.PollingPeriod
	(RadioConfig_ShortSleepDuration)(0),              // 11: SlpProtocol.RadioConfig.ShortSleepDuration
	(RadioConfig_LongSleepDuration)(0),               // 12: SlpProtocol.RadioConfig.LongSleepDuration
	(BsCommand_BaseStationCommands)(0),               // 13: SlpProtocol.BsCommand.BaseStationCommands
	(SlpCommand_SlpCommands)(0),                      // 14: SlpProtocol.SlpCommand.SlpCommands
	(ResponseToSlpCommand_CommandStatus)(0),          // 15: SlpProtocol.ResponseToSlpCommand.CommandStatus
	(ServicePackageStatusResponse_ResponseStatus)(0), // 16: SlpProtocol.ServicePackageStatusResponse.ResponseStatus
	(RegisterDeviceInSystem_Status)(0),               // 17: SlpProtocol.RegisterDeviceInSystem.Status
	(*ConnectionRequest)(nil),                        // 18: SlpProtocol.ConnectionRequest
	(*ConfirmConnection)(nil),                        // 19: SlpProtocol.ConfirmConnection
	(*SlpMessage)(nil),                               // 20: SlpProtocol.SlpMessage
	(*SuData)(nil),                                   // 21: SlpProtocol.SuData
	(*Su)(nil),                                       // 22: SlpProtocol.Su
	(*Lbs)(nil),                                      // 23: SlpProtocol.Lbs
	(*Ts)(nil),                                       // 24: SlpProtocol.Ts
	(*TelemetryData)(nil),                            // 25: SlpProtocol.TelemetryData
	(*ConfirmingPackage)(nil),                        // 26: SlpProtocol.ConfirmingPackage
	(*BsConfig)(nil),                                 // 27: SlpProtocol.BsConfig
	(*RadioConfig)(nil),                              // 28: SlpProtocol.RadioConfig
	(*BsCommand)(nil),                                // 29: SlpProtocol.BsCommand
	(*SlpCommand)(nil),                               // 30: SlpProtocol.SlpCommand
	(*ResponseToSlpCommand)(nil),                     // 31: SlpProtocol.ResponseToSlpCommand
	(*ToCancelSlpCommand)(nil),                       // 32: SlpProtocol.ToCancelSlpCommand
	(*CheckingConnection)(nil),                       // 33: SlpProtocol.CheckingConnection
	(*ServicePackage)(nil),                           // 34: SlpProtocol.ServicePackage
	(*ServicePackageStatusRequest)(nil),              // 35: SlpProtocol.ServicePackageStatusRequest
	(*ServicePackageStatusResponse)(nil),             // 36: SlpProtocol.ServicePackageStatusResponse
	(*RemoveServicePackage)(nil),                     // 37: SlpProtocol.RemoveServicePackage
	(*DeviceRegistrationRequest)(nil),                // 38: SlpProtocol.DeviceRegistrationRequest
	(*DeviceFirmwareVersion)(nil),                    // 39: SlpProtocol.DeviceFirmwareVersion
	(*ConfirmDeviceRegistration)(nil),                // 40: SlpProtocol.ConfirmDeviceRegistration
	(*RegisterDeviceInSystem)(nil),                   // 41: SlpProtocol.RegisterDeviceInSystem
}
var file_api_proto_v9_proto_depIdxs = []int32{
	2,  // 0: SlpProtocol.ConnectionRequest.encryption_type:type_name -> SlpProtocol.EncryptionTypes
	4,  // 1: SlpProtocol.SlpMessage.message_type:type_name -> SlpProtocol.SlpMessage.SlpMessageTypes
	22, // 2: SlpProtocol.SuData.su_list:type_name -> SlpProtocol.Su
	23, // 3: SlpProtocol.SuData.Lbs_list:type_name -> SlpProtocol.Lbs
	24, // 4: SlpProtocol.SuData.Ts_list:type_name -> SlpProtocol.Ts
	6,  // 5: SlpProtocol.Su.alarm:type_name -> SlpProtocol.Su.AlarmType
	5,  // 6: SlpProtocol.Su.additional_message:type_name -> SlpProtocol.Su.AdditionalMessageSu
	7,  // 7: SlpProtocol.Lbs.additional_message:type_name -> SlpProtocol.Lbs.AdditionalMessageLbs
	8,  // 8: SlpProtocol.Ts.additional_message:type_name -> SlpProtocol.Ts.AdditionalMessageTs
	2,  // 9: SlpProtocol.BsConfig.encryption_type:type_name -> SlpProtocol.EncryptionTypes
	9,  // 10: SlpProtocol.BsConfig.logging_level:type_name -> SlpProtocol.BsConfig.LoggingLevel
	10, // 11: SlpProtocol.RadioConfig.polling_period:type_name -> SlpProtocol.RadioConfig.PollingPeriod
	11, // 12: SlpProtocol.RadioConfig.short_sleep_duration:type_name -> SlpProtocol.RadioConfig.ShortSleepDuration
	12, // 13: SlpProtocol.RadioConfig.long_sleep_duration:type_name -> SlpProtocol.RadioConfig.LongSleepDuration
	13, // 14: SlpProtocol.BsCommand.command:type_name -> SlpProtocol.BsCommand.BaseStationCommands
	14, // 15: SlpProtocol.SlpCommand.type:type_name -> SlpProtocol.SlpCommand.SlpCommands
	15, // 16: SlpProtocol.ResponseToSlpCommand.status:type_name -> SlpProtocol.ResponseToSlpCommand.CommandStatus
	3,  // 17: SlpProtocol.ServicePackage.type:type_name -> SlpProtocol.ServicePacketTypes
	3,  // 18: SlpProtocol.ServicePackageStatusRequest.type:type_name -> SlpProtocol.ServicePacketTypes
	3,  // 19: SlpProtocol.ServicePackageStatusResponse.type:type_name -> SlpProtocol.ServicePacketTypes
	16, // 20: SlpProtocol.ServicePackageStatusResponse.status:type_name -> SlpProtocol.ServicePackageStatusResponse.ResponseStatus
	3,  // 21: SlpProtocol.RemoveServicePackage.type:type_name -> SlpProtocol.ServicePacketTypes
	1,  // 22: SlpProtocol.DeviceRegistrationRequest.device_type:type_name -> SlpProtocol.DeviceType
	1,  // 23: SlpProtocol.DeviceFirmwareVersion.device_type:type_name -> SlpProtocol.DeviceType
	1,  // 24: SlpProtocol.ConfirmDeviceRegistration.device_type:type_name -> SlpProtocol.DeviceType
	17, // 25: SlpProtocol.RegisterDeviceInSystem.status:type_name -> SlpProtocol.RegisterDeviceInSystem.Status
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_api_proto_v9_proto_init() }
func file_api_proto_v9_proto_init() {
	if File_api_proto_v9_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_proto_v9_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_v9_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_v9_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlpMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_v9_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_v9_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Su); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_v9_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lbs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_v9_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_v9_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_v9_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmingPackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_v9_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_v9_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RadioConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_v9_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BsCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_v9_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlpCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_v9_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseToSlpCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_v9_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToCancelSlpCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_v9_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckingConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_v9_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServicePackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_v9_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServicePackageStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_v9_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServicePackageStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_v9_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveServicePackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_v9_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceRegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_v9_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceFirmwareVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_v9_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmDeviceRegistration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_v9_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterDeviceInSystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_v9_proto_rawDesc,
			NumEnums:      18,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_proto_v9_proto_goTypes,
		DependencyIndexes: file_api_proto_v9_proto_depIdxs,
		EnumInfos:         file_api_proto_v9_proto_enumTypes,
		MessageInfos:      file_api_proto_v9_proto_msgTypes,
	}.Build()
	File_api_proto_v9_proto = out.File
	file_api_proto_v9_proto_rawDesc = nil
	file_api_proto_v9_proto_goTypes = nil
	file_api_proto_v9_proto_depIdxs = nil
}
